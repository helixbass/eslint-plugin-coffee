// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Utility functions for props
   */
  'use strict';
  /**
   * Checks if the node passed in looks like a childContextTypes declaration.
   * @param {ASTNode} node The node to check.
   * @returns {Boolean} `true` if the node is a childContextTypes declaration, `false` if not
   */
  /**
   * Checks if the node passed in looks like a contextTypes declaration.
   * @param {ASTNode} node The node to check.
   * @returns {Boolean} `true` if the node is a contextTypes declaration, `false` if not
   */
  /**
   * Checks if the Identifier node passed in looks like a defaultProps declaration.
   * @param {ASTNode} node The node to check. Must be an Identifier node.
   * @returns {Boolean} `true` if the node is a defaultProps declaration, `false` if not
   */
  /**
   * Checks if the Identifier node passed in looks like a propTypes declaration.
   * @param {ASTNode} node The node to check. Must be an Identifier node.
   * @returns {Boolean} `true` if the node is a propTypes declaration, `false` if not
   */
  /**
   * Checks if the PropTypes MemberExpression node passed in declares a required propType.
   * @param {ASTNode} propTypeExpression node to check. Must be a `PropTypes` MemberExpression.
   * @returns {Boolean} `true` if this PropType is required, `false` if not.
   */
  var astUtil, isChildContextTypesDeclaration, isContextTypesDeclaration, isDefaultPropsDeclaration, isPropTypesDeclaration, isPropertyOnClassBody, isRequiredPropType;

  astUtil = require('./ast');

  isPropertyOnClassBody = function(node) {
    return (node != null ? node.type : void 0) === 'Property' && node.parent.type === 'ObjectExpression' && node.parent.parent.type === 'ExpressionStatement' && node.parent.parent.parent.type === 'ClassBody';
  };

  isPropTypesDeclaration = function(node) {
    if (node && node.type === 'ClassProperty') {
      if (node.typeAnnotation && node.key.name === 'props') {
        // Flow support
        return true;
      }
    }
    if (isPropertyOnClassBody(node)) {
      return false;
    }
    return astUtil.getPropertyName(node) === 'propTypes';
  };

  isContextTypesDeclaration = function(node) {
    if (node && node.type === 'ClassProperty') {
      if (node.typeAnnotation && node.key.name === 'context') {
        // Flow support
        return true;
      }
    }
    if (isPropertyOnClassBody(node)) {
      return false;
    }
    return astUtil.getPropertyName(node) === 'contextTypes';
  };

  isChildContextTypesDeclaration = function(node) {
    if (isPropertyOnClassBody(node)) {
      return false;
    }
    return astUtil.getPropertyName(node) === 'childContextTypes';
  };

  isDefaultPropsDeclaration = function(node) {
    var propName;
    if (isPropertyOnClassBody(node)) {
      return false;
    }
    propName = astUtil.getPropertyName(node);
    return propName === 'defaultProps' || propName === 'getDefaultProps';
  };

  isRequiredPropType = function(propTypeExpression) {
    return propTypeExpression.type === 'MemberExpression' && propTypeExpression.property.name === 'isRequired';
  };

  module.exports = {isPropTypesDeclaration, isContextTypesDeclaration, isChildContextTypesDeclaration, isDefaultPropsDeclaration, isRequiredPropType};

}).call(this);
