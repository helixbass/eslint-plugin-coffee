// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Utility functions for React components detection
   * @author Yannick Croissant
   */
  'use strict';
  /**
   * Search a particular variable in a list
   * @param {Array} variables The variables list.
   * @param {Array} name The name of the variable to search.
   * @returns {Boolean} True if the variable was found, false if not.
   */
  /**
   * Find a variable by name in the current scope.
   * @param {Object} context The current rule context.
   * @param  {string} name Name of the variable to look for.
   * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.
   */
  /**
   * Find and return a particular variable in a list
   * @param {Array} variables The variables list.
   * @param {Array} name The name of the variable to search.
   * @returns {Object} Variable if the variable was found, null if not.
   */
  /**
   * List all variable in a given scope
   *
   * Contain a patch for babel-eslint to avoid https://github.com/babel/babel-eslint/issues/21
   *
   * @param {Object} context The current rule context.
   * @returns {Array} The variables list
   */
  var findVariable, findVariableByName, getDeclarationAssignmentAncestor, getVariable, variablesInScope;

  ({getDeclarationAssignmentAncestor} = require('../ast-utils'));

  findVariable = function(variables, name) {
    return variables.some(function(variable) {
      return variable.name === name;
    });
  };

  getVariable = function(variables, name) {
    return variables.find(function(variable) {
      return variable.name === name;
    });
  };

  variablesInScope = function(context) {
    var scope, variables;
    scope = context.getScope();
    ({variables} = scope);
    while (scope.type !== 'global') {
      scope = scope.upper;
      variables = scope.variables.concat(variables);
    }
    if (scope.childScopes.length) {
      variables = scope.childScopes[0].variables.concat(variables);
      if (scope.childScopes[0].childScopes.length) {
        variables = scope.childScopes[0].childScopes[0].variables.concat(variables);
      }
    }
    variables.reverse();
    return variables;
  };

  findVariableByName = function(context, name) {
    var node, ref, ref1, variable;
    variable = getVariable(variablesInScope(context), name);
    if (!(node = variable != null ? (ref = variable.defs[0]) != null ? ref.node : void 0 : void 0)) {
      return null;
    }
    if (node.type === 'TypeAlias') {
      return node.right;
    }
    if (node.init != null) {
      return node.init;
    }
    if (node.declaration && node.parent.type === 'AssignmentExpression') {
      return node.parent.right;
    }
    if (node.type === 'Identifier' && node.declaration) {
      return (ref1 = getDeclarationAssignmentAncestor(node)) != null ? ref1.right : void 0;
    }
    return null;
  };

  module.exports = {findVariable, findVariableByName, getVariable, variablesInScope};

}).call(this);
