// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to disallow a negated condition
   * @author Alberto Rodr√≠guez
   */
  'use strict';
  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow negated conditions',
        category: 'Stylistic Issues',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-negated-condition'
      },
      schema: [
        {
          type: 'object',
          properties: {
            requireElse: {
              type: 'boolean'
            }
          },
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      /**
       * Determines if a given node is an if-else without a condition on the else
       * @param {ASTNode} node The node to check.
       * @returns {boolean} True if the node has an else without an if.
       * @private
       */
      /**
       * Determines if a given node is a negated binary expression
       * @param {Test} test The test to check.
       * @returns {boolean} True if the node is a negated binary expression.
       * @private
       */
      /**
       * Determines if a given node has a negated if expression
       * @param {ASTNode} node The node to check.
       * @returns {boolean} True if the node has a negated if expression.
       * @private
       */
      /**
       * Determines if a given node is a negated unary expression
       * @param {Object} test The test object to check.
       * @returns {boolean} True if the node is a negated unary expression.
       * @private
       */
      var checkNode, hasElseWithoutCondition, isNegatedBinaryExpression, isNegatedIf, isNegatedUnaryExpression, ref, requireElse;
      ({requireElse} = (ref = context.options[0]) != null ? ref : {});
      hasElseWithoutCondition = function(node) {
        return node.alternate && node.alternate.type !== 'IfStatement';
      };
      isNegatedUnaryExpression = function(test) {
        var ref1;
        return test.type === 'UnaryExpression' && ((ref1 = test.operator) === '!' || ref1 === 'not');
      };
      isNegatedBinaryExpression = function(test) {
        var ref1;
        return test.type === 'BinaryExpression' && ((ref1 = test.operator) === '!=' || ref1 === 'isnt');
      };
      isNegatedIf = function(node) {
        return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);
      };
      checkNode = function(node) {
        if (!(!requireElse || hasElseWithoutCondition(node))) {
          return;
        }
        if (isNegatedIf(node)) {
          return context.report({
            node,
            message: 'Unexpected negated condition.'
          });
        }
      };
      return {
        IfStatement: checkNode,
        ConditionalExpression: checkNode
      };
    }
  };

}).call(this);
