// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to disallow anonymous default exports.
   * @author Duncan Beevers
   */
  var defaults, defs, docsUrl, ffromPairs, flow, fmap, schemaProperties;

  // import docsUrl from '../docsUrl'
  docsUrl = function() {
    return '';
  };

  ({
    flow,
    map: fmap,
    fromPairs: ffromPairs
  } = require('lodash/fp'));

  defs = {
    ArrayExpression: {
      option: 'allowArray',
      description: 'If `false`, will report default export of an array',
      message: 'Assign array to a variable before exporting as module default'
    },
    ArrowFunctionExpression: {
      option: 'allowArrowFunction',
      description: 'If `false`, will report default export of an arrow function',
      message: 'Assign arrow function to a variable before exporting as module default'
    },
    CallExpression: {
      option: 'allowCallExpression',
      description: 'If `false`, will report default export of a function call',
      message: 'Assign call result to a variable before exporting as module default',
      default: true
    },
    ClassDeclaration: {
      option: 'allowAnonymousClass',
      description: 'If `false`, will report default export of an anonymous class',
      message: 'Unexpected default export of anonymous class',
      forbid: function(node) {
        return !node.declaration.id;
      }
    },
    FunctionDeclaration: {
      option: 'allowAnonymousFunction',
      description: 'If `false`, will report default export of an anonymous function',
      message: 'Unexpected default export of anonymous function',
      forbid: function(node) {
        return !node.declaration.id;
      }
    },
    FunctionExpression: {
      option: 'allowAnonymousFunction',
      description: 'If `false`, will report default export of an anonymous function',
      message: 'Unexpected default export of anonymous function',
      forbid: function(node) {
        return !node.declaration.id;
      }
    },
    Literal: {
      option: 'allowLiteral',
      description: 'If `false`, will report default export of a literal',
      message: 'Assign literal to a variable before exporting as module default'
    },
    ObjectExpression: {
      option: 'allowObject',
      description: 'If `false`, will report default export of an object expression',
      message: 'Assign object to a variable before exporting as module default'
    },
    TemplateLiteral: {
      option: 'allowLiteral',
      description: 'If `false`, will report default export of a literal',
      message: 'Assign literal to a variable before exporting as module default'
    }
  };

  schemaProperties = flow(fmap(function({option, description}) {
    return [
      option,
      {
        description,
        type: 'boolean'
      }
    ];
  }), ffromPairs)(defs);

  defaults = flow(fmap(function({
      option,
      default: defaultVal
    }) {
    return [option, defaultVal != null ? defaultVal : false];
  }), ffromPairs)(defs);

  module.exports = {
    meta: {
      docs: {
        url: docsUrl('no-anonymous-default-export')
      },
      schema: [
        {
          type: 'object',
          properties: schemaProperties,
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      var options;
      options = {...defaults, ...context.options[0]};
      return {
        ExportDefaultDeclaration: function(node) {
          var def;
          def = defs[node.declaration.type];
          // Recognized node type and allowed by configuration,
          //   and has no forbid check, or forbid check return value is truthy
          if (def && !options[def.option] && (!def.forbid || def.forbid(node))) {
            return context.report({
              node,
              message: def.message
            });
          }
        }
      };
    }
  };

}).call(this);
