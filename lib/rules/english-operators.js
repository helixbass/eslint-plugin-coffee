// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview This rule shoud require or disallow usage of "English" operators.
   * @author Julian Rosse
   */
  'use strict';
  var ENGLISH_OPERATORS, NON_ENGLISH_OPERATORS, getMessage, isBang, isDoubleBang;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  ENGLISH_OPERATORS = {
    not: '!',
    and: '&&',
    or: '||',
    is: '==',
    isnt: '!='
  };

  NON_ENGLISH_OPERATORS = {
    '!': 'not',
    '&&': 'and',
    '||': 'or',
    '==': 'is',
    '!=': 'isnt'
  };

  isBang = function({operator}) {
    return operator === '!';
  };

  isDoubleBang = function(node) {
    if (!isBang(node)) {
      return false;
    }
    if (isBang(node.parent)) {
      return true;
    }
    if (isBang(node.argument)) {
      return true;
    }
    return false;
  };

  getMessage = function({useEnglish, operator}) {
    return `Prefer the usage of '${(useEnglish ? NON_ENGLISH_OPERATORS : ENGLISH_OPERATORS)[operator]}' over '${operator}'`;
  };

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'enforce consistent usage of English operators',
        category: 'Stylistic Issues',
        recommended: false
      },
      // url: 'https://eslint.org/docs/rules/space-unary-ops'
      schema: [
        {
          enum: ['always',
        'never']
        }
      ]
    },
    create: function(context) {
      var checkOp, ref, useEnglish;
      useEnglish = ((ref = context.options) != null ? ref[0] : void 0) !== 'never';
      checkOp = function(node) {
        if (!(node.operator in (useEnglish ? NON_ENGLISH_OPERATORS : ENGLISH_OPERATORS))) {
          return;
        }
        if (isDoubleBang(node)) {
          return;
        }
        return context.report({
          node,
          message: getMessage({
            useEnglish,
            operator: node.operator
          })
        });
      };
      return {
        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------
        UnaryExpression: checkOp,
        BinaryExpression: checkOp,
        LogicalExpression: checkOp
      };
    }
  };

}).call(this);
