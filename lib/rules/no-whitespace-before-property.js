// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to disallow whitespace before properties
   * @author Kai Cataldo
   */
  'use strict';
  var astUtils, isPrototypeShorthand, isTokenStartOnSameLine;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  astUtils = require('../eslint-ast-utils');

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  isPrototypeShorthand = function(node) {
    return node.object.type === 'MemberExpression' && node.object.shorthand;
  };

  isTokenStartOnSameLine = function(left, right) {
    return left.loc.start.line === right.loc.start.line;
  };

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      type: 'layout',
      docs: {
        description: 'disallow whitespace before properties',
        category: 'Stylistic Issues',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-whitespace-before-property'
      },
      fixable: 'whitespace',
      schema: []
    },
    create: function(context) {
      var reportError, sourceCode;
      sourceCode = context.getSourceCode();
      //--------------------------------------------------------------------------
      // Helpers
      //--------------------------------------------------------------------------
      /**
       * Reports whitespace before property token
       * @param {ASTNode} node the node to report in the event of an error
       * @param {Token} leftToken the left token
       * @param {Token} rightToken the right token
       * @returns {void}
       * @private
       */
      reportError = function(node, leftToken, rightToken) {
        var replacementText;
        replacementText = node.computed ? '' : isPrototypeShorthand(node) ? '::' : '.';
        return context.report({
          node,
          message: 'Unexpected whitespace before property {{propName}}.',
          data: {
            propName: sourceCode.getText(node.property)
          },
          fix: function(fixer) {
            if (!node.computed && astUtils.isDecimalInteger(node.object)) {
              /*
               * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.
               * Don't fix this case.
               */
              return null;
            }
            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);
          }
        });
      };
      return {
        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------
        MemberExpression: function(node) {
          var leftToken, rightToken;
          if (node.shorthand) {
            return;
          }
          if (node.object.type === 'ThisExpression' && node.object.shorthand) {
            return;
          }
          if (!astUtils.isTokenOnSameLine(node.object, node.property)) {
            return;
          }
          if (isPrototypeShorthand(node) && !isTokenStartOnSameLine(node.object, node.property)) {
            return;
          }
          if (node.computed) {
            rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);
            leftToken = sourceCode.getTokenBefore(rightToken);
          } else {
            rightToken = sourceCode.getFirstToken(node.property);
            leftToken = sourceCode.getTokenBefore(rightToken, 1);
          }
          if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {
            return reportError(node, leftToken, rightToken);
          }
        }
      };
    }
  };

}).call(this);
