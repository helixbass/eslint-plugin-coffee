// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to prefer ES6 to CJS
   * @author Jamund Ferguson
   */
  var EXPORT_MESSAGE, IMPORT_MESSAGE, allowPrimitive, allowRequire, normalizeLegacyOptions, schemaObject, schemaString;

  // import docsUrl from '../docsUrl'
  EXPORT_MESSAGE = 'Expected "export" or "export default"';

  IMPORT_MESSAGE = 'Expected "import" instead of "require()"';

  normalizeLegacyOptions = function(options) {
    if (options.indexOf('allow-primitive-modules') >= 0) {
      return {
        allowPrimitiveModules: true
      };
    }
    return options[0] || {};
  };

  allowPrimitive = function(node, options) {
    if (!options.allowPrimitiveModules) {
      return false;
    }
    if (!(node.parent.type === 'AssignmentExpression' && node === node.parent.left)) {
      return false;
    }
    return node.parent.right.type !== 'ObjectExpression';
  };

  allowRequire = function(node, options) {
    return options.allowRequire;
  };

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  schemaString = {
    enum: ['allow-primitive-modules']
  };

  schemaObject = {
    type: 'object',
    properties: {
      allowPrimitiveModules: {
        type: 'boolean'
      },
      allowRequire: {
        type: 'boolean'
      }
    },
    additionalProperties: false
  };

  module.exports = {
    meta: {
      docs: {
        // url: docsUrl 'no-commonjs'
        url: ''
      },
      schema: {
        anyOf: [
          {
            type: 'array',
            items: [schemaString],
            additionalItems: false
          },
          {
            type: 'array',
            items: [schemaObject],
            additionalItems: false
          }
        ]
      }
    },
    create: function(context) {
      var options;
      options = normalizeLegacyOptions(context.options);
      return {
        MemberExpression: function(node) {
          var isInScope;
          // module.exports
          if (node.object.name === 'module' && node.property.name === 'exports') {
            if (allowPrimitive(node, options)) {
              return;
            }
            context.report({
              node,
              message: EXPORT_MESSAGE
            });
          }
          // exports.
          if (node.object.name === 'exports') {
            isInScope = context.getScope().variables.some(function(variable) {
              return variable.name === 'exports';
            });
            if (!isInScope) {
              return context.report({
                node,
                message: EXPORT_MESSAGE
              });
            }
          }
        },
        CallExpression: function(call) {
          var module, ref;
          if (context.getScope().type !== 'module') {
            return;
          }
          if ((ref = call.parent.type) !== 'ExpressionStatement' && ref !== 'VariableDeclarator' && ref !== 'AssignmentExpression') {
            return;
          }
          if (call.callee.type !== 'Identifier') {
            return;
          }
          if (call.callee.name !== 'require') {
            return;
          }
          if (call.arguments.length !== 1) {
            return;
          }
          module = call.arguments[0];
          if (module.type !== 'Literal') {
            return;
          }
          if (typeof module.value !== 'string') {
            return;
          }
          if (allowRequire(call, options)) {
            return;
          }
          // keeping it simple: all 1-string-arg `require` calls are reported
          return context.report({
            node: call.callee,
            message: IMPORT_MESSAGE
          });
        }
      };
    }
  };

}).call(this);
