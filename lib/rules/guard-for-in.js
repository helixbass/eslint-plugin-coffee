// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to flag for-in loops without if statements inside
   * @author Nicholas C. Zakas
   */
  'use strict';
  var isIf;

  isIf = function(node) {
    if (node.type === 'IfStatement') {
      return node;
    }
    if (node.type === 'ExpressionStatement' && node.expression.type === 'ConditionalExpression') {
      return node.expression;
    }
    return false;
  };

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'require `for-in` loops to include an `if` statement',
        category: 'Best Practices',
        recommended: false,
        url: 'https://eslint.org/docs/rules/guard-for-in'
      },
      schema: []
    },
    create: function(context) {
      return {
        For: function(node) {
          var body, ifNode, own, style;
          ({body, style, own} = node);
          // only for-of
          if (style !== 'of') {
            return;
          }
          // `own` filters the prototype
          if (own) {
            return;
          }
          // empty statement
          if (body.type === 'EmptyStatement') {
            return;
          }
          // if statement
          if (isIf(body)) {
            return;
          }
          // empty block
          if (body.type === 'BlockStatement' && body.body.length === 0) {
            return;
          }
          // block with just if statement
          if (body.type === 'BlockStatement' && body.body.length === 1 && isIf(body.body[0])) {
            return;
          }
          // block that starts with if statement
          if (body.type === 'BlockStatement' && body.body.length >= 1 && (ifNode = isIf(body.body[0]))) {
            // ... whose consequent is a continue
            if (ifNode.consequent.type === 'ContinueStatement') {
              return;
            }
            // ... whose consequent is a block that contains only a continue
            if (ifNode.consequent.type === 'BlockStatement' && ifNode.consequent.body.length === 1 && ifNode.consequent.body[0].type === 'ContinueStatement') {
              return;
            }
          }
          return context.report({
            node,
            message: 'The body of a for-of should use "own" or be wrapped in an if statement to filter unwanted properties from the prototype.'
          });
        }
      };
    }
  };

}).call(this);
