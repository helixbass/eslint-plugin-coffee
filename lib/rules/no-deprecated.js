// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Prevent usage of deprecated methods
   * @author Yannick Croissant
   * @author Scott Feeney
   * @author Sergei Startsev
   */
  'use strict';
  var Components, DEPRECATED_MESSAGE, MODULES, astUtil, docsUrl, isDeclarationAssignment, pragmaUtil, versionUtil,
    hasProp = {}.hasOwnProperty;

  Components = require('../util/react/Components');

  astUtil = require('../util/react/ast');

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  pragmaUtil = require('eslint-plugin-react/lib/util/pragma');

  versionUtil = require('eslint-plugin-react/lib/util/version');

  ({isDeclarationAssignment} = require('../util/ast-utils'));

  // ------------------------------------------------------------------------------
  // Constants
  // ------------------------------------------------------------------------------
  MODULES = {
    react: ['React'],
    'react-addons-perf': ['ReactPerf', 'Perf']
  };

  DEPRECATED_MESSAGE = '{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}';

  // ------------------------------------------------------------------------------
  // Rule Definition
  // ------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'Prevent usage of deprecated methods',
        category: 'Best Practices',
        recommended: true,
        url: docsUrl('no-deprecated')
      },
      schema: []
    },
    create: Components.detect(function(context, components, utils) {
      /**
       * Checks life cycle methods
       * @param {ASTNode} node The AST node being checked.
       */
      /**
       * Returns life cycle methods if available
       * @param {ASTNode} node The AST node being checked.
       * @returns {Array} The array of methods.
       */
      var checkDeprecation, checkLifeCycleMethods, getDeprecated, getLifeCycleMethods, getReactModuleName, isDeprecated, pragma, sourceCode;
      sourceCode = context.getSourceCode();
      pragma = pragmaUtil.getFromContext(context);
      getDeprecated = function() {
        var deprecated;
        deprecated = {};
        // 0.12.0
        deprecated[`${pragma}.renderComponent`] = ['0.12.0', `${pragma}.render`];
        deprecated[`${pragma}.renderComponentToString`] = ['0.12.0', `${pragma}.renderToString`];
        deprecated[`${pragma}.renderComponentToStaticMarkup`] = ['0.12.0', `${pragma}.renderToStaticMarkup`];
        deprecated[`${pragma}.isValidComponent`] = ['0.12.0', `${pragma}.isValidElement`];
        deprecated[`${pragma}.PropTypes.component`] = ['0.12.0', `${pragma}.PropTypes.element`];
        deprecated[`${pragma}.PropTypes.renderable`] = ['0.12.0', `${pragma}.PropTypes.node`];
        deprecated[`${pragma}.isValidClass`] = ['0.12.0'];
        deprecated['this.transferPropsTo'] = ['0.12.0', 'spread operator ({...})'];
        // 0.13.0
        deprecated[`${pragma}.addons.classSet`] = ['0.13.0', 'the npm module classnames'];
        deprecated[`${pragma}.addons.cloneWithProps`] = ['0.13.0', `${pragma}.cloneElement`];
        // 0.14.0
        deprecated[`${pragma}.render`] = ['0.14.0', 'ReactDOM.render'];
        deprecated[`${pragma}.unmountComponentAtNode`] = ['0.14.0', 'ReactDOM.unmountComponentAtNode'];
        deprecated[`${pragma}.findDOMNode`] = ['0.14.0', 'ReactDOM.findDOMNode'];
        deprecated[`${pragma}.renderToString`] = ['0.14.0', 'ReactDOMServer.renderToString'];
        deprecated[`${pragma}.renderToStaticMarkup`] = ['0.14.0', 'ReactDOMServer.renderToStaticMarkup'];
        // 15.0.0
        deprecated[`${pragma}.addons.LinkedStateMixin`] = ['15.0.0'];
        deprecated['ReactPerf.printDOM'] = ['15.0.0', 'ReactPerf.printOperations'];
        deprecated['Perf.printDOM'] = ['15.0.0', 'Perf.printOperations'];
        deprecated['ReactPerf.getMeasurementsSummaryMap'] = ['15.0.0', 'ReactPerf.getWasted'];
        deprecated['Perf.getMeasurementsSummaryMap'] = ['15.0.0', 'Perf.getWasted'];
        // 15.5.0
        deprecated[`${pragma}.createClass`] = ['15.5.0', 'the npm module create-react-class'];
        deprecated[`${pragma}.addons.TestUtils`] = ['15.5.0', 'ReactDOM.TestUtils'];
        deprecated[`${pragma}.PropTypes`] = ['15.5.0', 'the npm module prop-types'];
        // 15.6.0
        deprecated[`${pragma}.DOM`] = ['15.6.0', 'the npm module react-dom-factories'];
        // 16.3.0
        deprecated.componentWillMount = ['16.3.0', 'UNSAFE_componentWillMount', 'https://reactjs.org/docs/react-component.html#unsafe_componentwillmount'];
        deprecated.componentWillReceiveProps = ['16.3.0', 'UNSAFE_componentWillReceiveProps', 'https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops'];
        deprecated.componentWillUpdate = ['16.3.0', 'UNSAFE_componentWillUpdate', 'https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate'];
        return deprecated;
      };
      isDeprecated = function(method) {
        var deprecated;
        deprecated = getDeprecated();
        return (deprecated != null ? deprecated[method] : void 0) && deprecated[method][0] && versionUtil.testReactVersion(context, deprecated[method][0]);
      };
      checkDeprecation = function(node, methodName, methodNode) {
        var deprecated, newMethod, refs, version;
        if (!isDeprecated(methodName)) {
          return;
        }
        deprecated = getDeprecated();
        version = deprecated[methodName][0];
        newMethod = deprecated[methodName][1];
        refs = deprecated[methodName][2];
        return context.report({
          node: methodNode || node,
          message: DEPRECATED_MESSAGE,
          data: {
            oldMethod: methodName,
            version,
            newMethod: newMethod ? `, use ${newMethod} instead` : '',
            refs: refs ? `, see ${refs}` : ''
          }
        });
      };
      getReactModuleName = function(node) {
        var _, module, moduleName;
        moduleName = false;
        if (!node) {
          return moduleName;
        }
        for (_ in MODULES) {
          if (!hasProp.call(MODULES, _)) continue;
          module = MODULES[_];
          moduleName = module.find(function(name) {
            return name === node.name;
          });
          if (moduleName) {
            break;
          }
        }
        return moduleName;
      };
      getLifeCycleMethods = function(node) {
        var properties;
        properties = astUtil.getComponentProperties(node);
        return properties.map(function(property) {
          return {
            name: astUtil.getPropertyName(property),
            node: astUtil.getPropertyNameNode(property)
          };
        });
      };
      checkLifeCycleMethods = function(node) {
        var methods;
        if (utils.isES5Component(node) || utils.isES6Component(node)) {
          methods = getLifeCycleMethods(node);
          return methods.forEach(function(method) {
            return checkDeprecation(node, method.name, method.node);
          });
        }
      };
      return {
        // --------------------------------------------------------------------------
        // Public
        // --------------------------------------------------------------------------
        MemberExpression: function(node) {
          return checkDeprecation(node, sourceCode.getText(node));
        },
        ImportDeclaration: function(node) {
          var isReactImport;
          isReactImport = typeof MODULES[node.source.value] !== 'undefined';
          if (!isReactImport) {
            return;
          }
          return node.specifiers.forEach(function(specifier) {
            if (!specifier.imported) {
              return;
            }
            return checkDeprecation(node, `${MODULES[node.source.value][0]}.${specifier.imported.name}`);
          });
        },
        VariableDeclarator: function(node) {
          var isDestructuring, isReactRequire, isRequire, reactModuleName, ref, ref1;
          reactModuleName = getReactModuleName(node.init);
          isRequire = ((ref = node.init) != null ? ref.callee : void 0) && node.init.callee.name === 'require';
          isReactRequire = ((ref1 = node.init) != null ? ref1.arguments : void 0) && node.init.arguments.length && typeof MODULES[node.init.arguments[0].value] !== 'undefined';
          isDestructuring = node.id && node.id.type === 'ObjectPattern';
          if (!(isDestructuring && reactModuleName) && !(isDestructuring && isRequire && isReactRequire)) {
            return;
          }
          return node.id.properties.forEach(function(property) {
            return checkDeprecation(node, `${reactModuleName || pragma}.${property.key.name}`);
          });
        },
        AssignmentExpression: function(node) {
          var isDestructuring, isReactRequire, isRequire, left, reactModuleName, ref, ref1, right;
          if (!isDeclarationAssignment(node)) {
            return;
          }
          ({left, right} = node);
          reactModuleName = getReactModuleName(right);
          isRequire = (right != null ? (ref = right.callee) != null ? ref.name : void 0 : void 0) === 'require';
          isReactRequire = (right != null ? (ref1 = right.arguments) != null ? ref1.length : void 0 : void 0) && (MODULES[right.arguments[0].value] != null);
          isDestructuring = left.type === 'ObjectPattern';
          if (!isDestructuring) {
            return;
          }
          if (!(reactModuleName || (isRequire && isReactRequire))) {
            return;
          }
          return left.properties.forEach(function(property) {
            return checkDeprecation(node, `${reactModuleName || pragma}.${property.key.name}`);
          });
        },
        ClassDeclaration: checkLifeCycleMethods,
        ClassExpression: checkLifeCycleMethods,
        ObjectExpression: checkLifeCycleMethods
      };
    })
  };

}).call(this);
