// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to flag when return statement contains assignment
   * @author Ilya Volodin
   */
  'use strict';
  var SENTINEL_TYPE, astUtils;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  astUtils = require('../eslint-ast-utils');

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/;

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow assignment operators in `return` statements',
        category: 'Best Practices',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-return-assign'
      },
      schema: [
        {
          enum: ['except-parens',
        'always']
        }
      ]
    },
    create: function(context) {
      var always, sourceCode;
      always = (context.options[0] || 'except-parens') !== 'except-parens';
      sourceCode = context.getSourceCode();
      return {
        AssignmentExpression: function(node) {
          var currentChild, parent;
          if (!always && astUtils.isParenthesised(sourceCode, node)) {
            return;
          }
          currentChild = node;
          ({parent} = currentChild);
          // Find ReturnStatement or ArrowFunctionExpression in ancestors.
          while (parent && !SENTINEL_TYPE.test(parent.type)) {
            currentChild = parent;
            ({parent} = parent);
          }
          // Reports.
          if (parent && parent.type === 'ReturnStatement') {
            return context.report({
              node: parent,
              message: 'Return statement should not contain assignment.'
            });
          } else if (currentChild.returns) {
            return context.report({
              node: currentChild,
              message: 'Implicit return statement should not contain assignment.'
            });
          }
        }
      };
    }
  };

  // else if (
//   parent and
//   parent.type is 'ArrowFunctionExpression' and
//   parent.body is currentChild
// )
//   context.report
//     node: parent
//     message: 'Arrow function should not return assignment.'

}).call(this);
