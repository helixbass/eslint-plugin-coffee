// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to disallow uses of await inside of loops.
   * @author Nat Mote (nmote)
   */
  'use strict';
  /**
   * Check whether it should stop traversing ancestors at the given node.
   * @param {ASTNode} node A node to check.
   * @returns {boolean} `true` if it should stop traversing.
   */
  /**
   * Check whether the given node is in loop.
   * @param {ASTNode} node A node to check.
   * @param {ASTNode} parent A parent node to check.
   * @returns {boolean} `true` if the node is in loop.
   */
  var isBoundary, isLooped;

  isBoundary = function(node) {
    var t;
    t = node.type;
    /*
     * Don't report the await expressions on for-await-of loop since it's
     * asynchronous iteration intentionally.
     */
    return (t === 'FunctionDeclaration' || t === 'FunctionExpression' || t === 'ArrowFunctionExpression') || (t === 'For' && node.await === true);
  };

  isLooped = function(node, parent) {
    switch (parent.type) {
      case 'For':
        return node === parent.body;
      case 'WhileStatement':
        return node === parent.test || node === parent.body;
      default:
        return false;
    }
  };

  module.exports = {
    meta: {
      docs: {
        description: 'disallow `await` inside of loops',
        category: 'Possible Errors',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-await-in-loop'
      },
      schema: [],
      messages: {
        unexpectedAwait: 'Unexpected `await` inside a loop.'
      }
    },
    create: function(context) {
      /**
       * Validate an await expression.
       * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.
       * @returns {void}
       */
      var validate;
      validate = function(awaitNode) {
        var node, parent;
        if (awaitNode.type === 'For' && !awaitNode.await) {
          return;
        }
        node = awaitNode;
        ({parent} = node);
        while (parent && !isBoundary(parent)) {
          if (isLooped(node, parent)) {
            context.report({
              node: awaitNode,
              messageId: 'unexpectedAwait'
            });
            return;
          }
          node = parent;
          ({parent} = parent);
        }
      };
      return {
        AwaitExpression: validate,
        For: validate
      };
    }
  };

}).call(this);
