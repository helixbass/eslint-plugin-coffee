// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to flag trailing underscores in variable declarations.
   * @author Matt DuVall <http://www.mattduvall.com>
   */
  'use strict';
  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow dangling underscores in identifiers',
        category: 'Stylistic Issues',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-underscore-dangle'
      },
      schema: [
        {
          type: 'object',
          properties: {
            allow: {
              type: 'array',
              items: {
                type: 'string'
              }
            },
            allowAfterThis: {
              type: 'boolean'
            },
            allowAfterSuper: {
              type: 'boolean'
            },
            enforceInMethodNames: {
              type: 'boolean'
            }
          },
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      /**
       * Check if function has a underscore at the end
       * @param {ASTNode} node node to evaluate
       * @returns {void}
       * @private
       */
      /**
       * Check if member expression has a underscore at the end
       * @param {ASTNode} node node to evaluate
       * @returns {void}
       * @private
       */
      /**
       * Check if method declaration or method property has a underscore at the end
       * @param {ASTNode} node node to evaluate
       * @returns {void}
       * @private
       */
      /**
       * Check if variable expression has a underscore at the end
       * @param {ASTNode} node node to evaluate
       * @returns {void}
       * @private
       */
      /**
       * Check if identifier has a underscore at the end
       * @param {ASTNode} identifier node to evaluate
       * @returns {boolean} true if its is present
       * @private
       */
      /**
       * Check if identifier is a special case member expression
       * @param {ASTNode} identifier node to evaluate
       * @returns {boolean} true if its is a special case
       * @private
       */
      /**
       * Check if identifier is a special case variable expression
       * @param {ASTNode} identifier node to evaluate
       * @returns {boolean} true if its is a special case
       * @private
       */
      var ALLOWED_VARIABLES, allowAfterSuper, allowAfterThis, checkForTrailingUnderscoreInFunctionDeclaration, checkForTrailingUnderscoreInIdentifier, checkForTrailingUnderscoreInMemberExpression, checkForTrailingUnderscoreInMethod, checkForTrailingUnderscoreInVariableExpression, enforceInMethodNames, hasTrailingUnderscore, isAllowed, isSpecialCaseIdentifierForMemberExpression, isSpecialCaseIdentifierInVariableExpression, options;
      options = context.options[0] || {};
      ALLOWED_VARIABLES = options.allow ? options.allow : [];
      allowAfterThis = typeof options.allowAfterThis !== 'undefined' ? options.allowAfterThis : false;
      allowAfterSuper = typeof options.allowAfterSuper !== 'undefined' ? options.allowAfterSuper : false;
      enforceInMethodNames = typeof options.enforceInMethodNames !== 'undefined' ? options.enforceInMethodNames : false;
      //-------------------------------------------------------------------------
      // Helpers
      //-------------------------------------------------------------------------
      /**
       * Check if identifier is present inside the allowed option
       * @param {string} identifier name of the node
       * @returns {boolean} true if its is present
       * @private
       */
      isAllowed = function(identifier) {
        return ALLOWED_VARIABLES.some(function(ident) {
          return ident === identifier;
        });
      };
      hasTrailingUnderscore = function(identifier) {
        var len;
        len = identifier.length;
        return identifier !== '_' && (identifier[0] === '_' || identifier[len - 1] === '_');
      };
      isSpecialCaseIdentifierForMemberExpression = function(identifier) {
        return identifier === '__proto__';
      };
      isSpecialCaseIdentifierInVariableExpression = function(identifier) {
        // Checks for the underscore library usage here
        return identifier === '_';
      };
      checkForTrailingUnderscoreInFunctionDeclaration = function(node) {
        var identifier;
        if (node.id) {
          identifier = node.id.name;
          if (typeof identifier !== 'undefined' && hasTrailingUnderscore(identifier) && !isAllowed(identifier)) {
            return context.report({
              node,
              message: "Unexpected dangling '_' in '{{identifier}}'.",
              data: {identifier}
            });
          }
        }
      };
      checkForTrailingUnderscoreInIdentifier = function(node) {
        var identifier;
        if (!node.declaration) {
          return;
        }
        identifier = node.name;
        if (hasTrailingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {
          return context.report({
            node,
            message: "Unexpected dangling '_' in '{{identifier}}'.",
            data: {identifier}
          });
        }
      };
      checkForTrailingUnderscoreInVariableExpression = function(node) {
        var identifier;
        identifier = node.id.name;
        if (typeof identifier !== 'undefined' && hasTrailingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {
          return context.report({
            node,
            message: "Unexpected dangling '_' in '{{identifier}}'.",
            data: {identifier}
          });
        }
      };
      checkForTrailingUnderscoreInMemberExpression = function(node) {
        var identifier, isMemberOfSuper, isMemberOfThis;
        identifier = node.property.name;
        isMemberOfThis = node.object.type === 'ThisExpression';
        isMemberOfSuper = node.object.type === 'Super';
        if (typeof identifier !== 'undefined' && hasTrailingUnderscore(identifier) && !(isMemberOfThis && allowAfterThis) && !(isMemberOfSuper && allowAfterSuper) && !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {
          return context.report({
            node,
            message: "Unexpected dangling '_' in '{{identifier}}'.",
            data: {identifier}
          });
        }
      };
      checkForTrailingUnderscoreInMethod = function(node) {
        var identifier, isMethod;
        identifier = node.key.name;
        isMethod = node.type === 'MethodDefinition' || (node.type === 'Property' && (node.method || node.value.type === 'FunctionExpression'));
        if (typeof identifier !== 'undefined' && enforceInMethodNames && isMethod && hasTrailingUnderscore(identifier)) {
          return context.report({
            node,
            message: "Unexpected dangling '_' in '{{identifier}}'.",
            data: {identifier}
          });
        }
      };
      return {
        //--------------------------------------------------------------------------
        // Public API
        //--------------------------------------------------------------------------
        FunctionDeclaration: checkForTrailingUnderscoreInFunctionDeclaration,
        VariableDeclarator: checkForTrailingUnderscoreInVariableExpression,
        Identifier: checkForTrailingUnderscoreInIdentifier,
        MemberExpression: checkForTrailingUnderscoreInMemberExpression,
        MethodDefinition: checkForTrailingUnderscoreInMethod,
        Property: checkForTrailingUnderscoreInMethod
      };
    }
  };

}).call(this);
