// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Forbid target='_blank' attribute
   * @author Kevin Miller
   */
  'use strict';
  var attributeValuePossiblyBlank, docsUrl, findLastIndex, getStringFromValue, hasDynamicLink, hasExternalLink, hasSecureRel, linkComponentsUtil;

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  linkComponentsUtil = require('eslint-plugin-react/lib/util/linkComponents');

  // ------------------------------------------------------------------------------
  // Rule Definition
  // ------------------------------------------------------------------------------
  findLastIndex = function(arr, condition) {
    var i;
    i = arr.length - 1;
    while (i >= 0) {
      if (condition(arr[i])) {
        return i;
      }
      i -= 1;
    }
    return -1;
  };

  attributeValuePossiblyBlank = function(attribute) {
    var expr, ref, value;
    if (!(attribute != null ? attribute.value : void 0)) {
      return false;
    }
    ({value} = attribute);
    if (value.type === 'Literal') {
      return typeof value.value === 'string' && value.value.toLowerCase() === '_blank';
    }
    if (value.type === 'JSXExpressionContainer') {
      expr = value.expression;
      if (expr.type === 'Literal') {
        return typeof expr.value === 'string' && expr.value.toLowerCase() === '_blank';
      }
      if (expr.type === 'ConditionalExpression') {
        if (((ref = expr.alternate) != null ? ref.type : void 0) === 'Literal' && expr.alternate.value && expr.alternate.value.toLowerCase() === '_blank') {
          return true;
        }
        if (expr.consequent.type === 'Literal' && expr.consequent.value && expr.consequent.value.toLowerCase() === '_blank') {
          return true;
        }
      }
    }
    return false;
  };

  hasExternalLink = function(node, linkAttribute, warnOnSpreadAttributes, spreadAttributeIndex) {
    var foundExternalLink, linkIndex;
    linkIndex = findLastIndex(node.attributes, function(attr) {
      var ref;
      return ((ref = attr.name) != null ? ref.name : void 0) === linkAttribute;
    });
    foundExternalLink = linkIndex !== -1 && (function(attr) {
      return attr.value.type === 'Literal' && /^(?:\w+:|\/\/)/.test(attr.value.value);
    })(node.attributes[linkIndex]);
    return foundExternalLink || (warnOnSpreadAttributes && linkIndex < spreadAttributeIndex);
  };

  hasDynamicLink = function(node, linkAttribute) {
    var dynamicLinkIndex;
    dynamicLinkIndex = findLastIndex(node.attributes, function(attr) {
      var ref;
      return ((ref = attr.name) != null ? ref.name : void 0) === linkAttribute && attr.value && attr.value.type === 'JSXExpressionContainer';
    });
    if (dynamicLinkIndex !== -1) {
      return true;
    }
    return void 0;
  };

  getStringFromValue = function(value) {
    var ref;
    if (value) {
      if (value.type === 'Literal') {
        return value.value;
      }
      if (value.type === 'JSXExpressionContainer') {
        if (value.expression.type === 'TemplateLiteral') {
          return value.expression.quasis[0].value.cooked;
        }
        return (ref = value.expression) != null ? ref.value : void 0;
      }
    }
    return null;
  };

  hasSecureRel = function(node, allowReferrer, warnOnSpreadAttributes, spreadAttributeIndex) {
    var noreferrer, relAttribute, relIndex, tags, value;
    relIndex = findLastIndex(node.attributes, function(attr) {
      return attr.type === 'JSXAttribute' && attr.name.name === 'rel';
    });
    if (relIndex === -1 || (warnOnSpreadAttributes && relIndex < spreadAttributeIndex)) {
      return false;
    }
    relAttribute = node.attributes[relIndex];
    value = getStringFromValue(relAttribute.value);
    tags = value && typeof value === 'string' && value.toLowerCase().split(' ');
    noreferrer = tags && tags.indexOf('noreferrer') >= 0;
    if (noreferrer) {
      return true;
    }
    return allowReferrer && tags && tags.indexOf('noopener') >= 0;
  };

  module.exports = {
    meta: {
      fixable: 'code',
      docs: {
        description: 'Forbid `target="_blank"` attribute without `rel="noreferrer"`',
        category: 'Best Practices',
        recommended: true,
        url: docsUrl('jsx-no-target-blank')
      },
      messages: {
        noTargetBlank: 'Using target="_blank" without rel="noreferrer" ' + 'is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener'
      },
      schema: [
        {
          type: 'object',
          properties: {
            allowReferrer: {
              type: 'boolean'
            },
            enforceDynamicLinks: {
              enum: ['always',
        'never']
            },
            warnOnSpreadAttributes: {
              type: 'boolean'
            }
          },
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      var allowReferrer, components, configuration, enforceDynamicLinks, warnOnSpreadAttributes;
      configuration = context.options[0] || {};
      allowReferrer = configuration.allowReferrer || false;
      warnOnSpreadAttributes = configuration.warnOnSpreadAttributes || false;
      enforceDynamicLinks = configuration.enforceDynamicLinks || 'always';
      components = linkComponentsUtil.getLinkComponents(context);
      return {
        JSXOpeningElement: function(node) {
          var hasDangerousLink, hasSpread, linkAttribute, spreadAttributeIndex, targetIndex;
          if (!components.has(node.name.name)) {
            return;
          }
          targetIndex = findLastIndex(node.attributes, function(attr) {
            var ref;
            return ((ref = attr.name) != null ? ref.name : void 0) === 'target';
          });
          spreadAttributeIndex = findLastIndex(node.attributes, function(attr) {
            return attr.type === 'JSXSpreadAttribute';
          });
          if (!attributeValuePossiblyBlank(node.attributes[targetIndex])) {
            hasSpread = spreadAttributeIndex >= 0;
            if (warnOnSpreadAttributes && hasSpread) {

            } else {
              // continue to check below
              if ((hasSpread && targetIndex < spreadAttributeIndex) || !hasSpread || !warnOnSpreadAttributes) {
                return;
              }
            }
          }
          linkAttribute = components.get(node.name.name);
          hasDangerousLink = hasExternalLink(node, linkAttribute, warnOnSpreadAttributes, spreadAttributeIndex) || (enforceDynamicLinks === 'always' && hasDynamicLink(node, linkAttribute));
          if (hasDangerousLink && !hasSecureRel(node, allowReferrer, warnOnSpreadAttributes, spreadAttributeIndex)) {
            context.report({
              node,
              messageId: 'noTargetBlank',
              fix: function(fixer) {
                var nodeWithAttrs, parts, relAttribute;
                // eslint 5 uses `node.attributes`; eslint 6+ uses `node.parent.attributes`
                nodeWithAttrs = node.parent.attributes ? node.parent : node;
                // eslint 5 does not provide a `name` property on JSXSpreadElements
                relAttribute = nodeWithAttrs.attributes.find(function(attr) {
                  var ref;
                  return ((ref = attr.name) != null ? ref.name : void 0) === 'rel';
                });
                if (targetIndex < spreadAttributeIndex || (spreadAttributeIndex >= 0 && !relAttribute)) {
                  return null;
                }
                if (!relAttribute) {
                  return fixer.insertTextAfter(nodeWithAttrs.attributes.slice(-1)[0], ' rel="noreferrer"');
                }
                if (!relAttribute.value) {
                  return fixer.insertTextAfter(relAttribute, '="noreferrer"');
                }
                if (relAttribute.value.type === 'Literal') {
                  parts = relAttribute.value.value.split('noreferrer').filter(Boolean);
                  return fixer.replaceText(relAttribute.value, `\"${parts.concat('noreferrer').join(' ')}\"`);
                }
                if (relAttribute.value.type === 'JSXExpressionContainer') {
                  if (relAttribute.value.expression.type === 'Literal') {
                    if (typeof relAttribute.value.expression.value === 'string') {
                      parts = relAttribute.value.expression.value.split('noreferrer').filter(Boolean);
                      return fixer.replaceText(relAttribute.value.expression, `\"${parts.concat('noreferrer').join(' ')}\"`);
                    }
                    // for undefined, boolean, number, symbol, bigint, and null
                    return fixer.replaceText(relAttribute.value, '"noreferrer"');
                  }
                }
                return null;
              }
            });
          }
          return void 0;
        }
      };
    }
  };

}).call(this);
