// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Prefers object spread property over Object.assign
   * @author Sharmila Jesupaul
   * See LICENSE file in root directory for full license.
   */
  'use strict';
  /**
   * Helper that checks if the Object.assign call has array spread
   * @param {ASTNode} node - The node that the rule warns on
   * @returns {boolean} - Returns true if the Object.assign call has array spread
   */
  var CALL, ReferenceTracker, hasArraySpread;

  ({CALL, ReferenceTracker} = require('eslint-utils'));

  hasArraySpread = function(node) {
    return node.arguments.some(function(arg) {
      return arg.type === 'SpreadElement';
    });
  };

  module.exports = {
    meta: {
      docs: {
        description: 'disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.',
        category: 'Stylistic Issues',
        recommended: false,
        url: 'https://eslint.org/docs/rules/prefer-object-spread'
      },
      schema: [],
      messages: {
        useSpreadMessage: 'Use an object spread instead of `Object.assign` eg: `{ ...foo }`',
        useLiteralMessage: 'Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`'
      }
    },
    create: function(context) {
      return {
        Program: function() {
          var messageId, node, ref, results, scope, trackMap, tracker, x;
          scope = context.getScope();
          tracker = new ReferenceTracker(scope);
          trackMap = {
            Object: {
              assign: {
                [CALL]: true
              }
            }
          };
          ref = tracker.iterateGlobalReferences(trackMap);
          // Iterate all calls of `Object.assign` (only of the global variable `Object`).
          results = [];
          for (x of ref) {
            ({node} = x);
            if (node.arguments.length >= 1 && node.arguments[0].type === 'ObjectExpression' && !hasArraySpread(node)) {
              messageId = node.arguments.length === 1 ? 'useLiteralMessage' : 'useSpreadMessage';
              results.push(context.report({node, messageId}));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
    }
  };

}).call(this);
