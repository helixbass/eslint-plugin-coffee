// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to enforce that all class methods use 'this'.
   * @author Patrick Williams
   */
  'use strict';
  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'enforce that class methods utilize `this`',
        category: 'Best Practices',
        recommended: false,
        url: 'https://eslint.org/docs/rules/class-methods-use-this'
      },
      schema: [
        {
          type: 'object',
          properties: {
            exceptMethods: {
              type: 'array',
              items: {
                type: 'string'
              }
            }
          },
          additionalProperties: false
        }
      ],
      messages: {
        missingThis: "Expected 'this' to be used by class method '{{name}}'."
      }
    },
    create: function(context) {
      /**
       * Initializes the current context to false and pushes it onto the stack.
       * These booleans represent whether 'this' has been used in the context.
       * @returns {void}
       * @private
       */
      /**
       * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.
       * Static methods and the constructor are exempt.
       * Then pops the context off the stack.
       * @param {ASTNode} node - A function node that was entered.
       * @returns {void}
       * @private
       */
      /**
       * Check if the node is an instance method not excluded by config
       * @param {ASTNode} node - node to check
       * @returns {boolean} True if it is an instance method, and not excluded by config
       * @private
       */
      /**
       * Check if the node is an instance method
       * @param {ASTNode} node - node to check
       * @returns {boolean} True if its an instance method
       * @private
       */
      /**
       * Mark the current context as having used 'this'.
       * @returns {void}
       * @private
       */
      var config, enterFunction, exceptMethods, exitFunction, isIncludedInstanceMethod, isInstanceMethod, markThisUsed, stack;
      config = context.options[0] ? {...context.options[0]} : {};
      exceptMethods = new Set(config.exceptMethods || []);
      stack = [];
      isInstanceMethod = function(node) {
        return !node.static && node.kind !== 'constructor' && node.type === 'MethodDefinition';
      };
      enterFunction = function(node) {
        if (!isInstanceMethod(node) && node.bound) {
          return;
        }
        return stack.push(false);
      };
      isIncludedInstanceMethod = function(node) {
        return isInstanceMethod(node) && !exceptMethods.has(node.key.name);
      };
      exitFunction = function(node) {
        var methodUsesThis;
        if (!isInstanceMethod(node) && node.bound) {
          return;
        }
        methodUsesThis = stack.pop();
        if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {
          return context.report({
            node,
            messageId: 'missingThis',
            data: {
              name: node.parent.key.name
            }
          });
        }
      };
      markThisUsed = function() {
        if (stack.length) {
          return stack[stack.length - 1] = true;
        }
      };
      return {
        FunctionDeclaration: enterFunction,
        'FunctionDeclaration:exit': exitFunction,
        FunctionExpression: enterFunction,
        'FunctionExpression:exit': exitFunction,
        ThisExpression: markThisUsed,
        Super: markThisUsed
      };
    }
  };

}).call(this);
