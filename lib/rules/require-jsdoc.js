// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to check for jsdoc presence.
   * @author Gyandeep Singh
   */
  'use strict';
  module.exports = {
    meta: {
      docs: {
        description: 'require JSDoc comments',
        category: 'Stylistic Issues',
        recommended: false,
        url: 'https://eslint.org/docs/rules/require-jsdoc'
      },
      schema: [
        {
          type: 'object',
          properties: {
            require: {
              type: 'object',
              properties: {
                ClassDeclaration: {
                  type: 'boolean'
                },
                MethodDefinition: {
                  type: 'boolean'
                },
                FunctionDeclaration: {
                  type: 'boolean'
                },
                ArrowFunctionExpression: {
                  type: 'boolean'
                },
                FunctionExpression: {
                  type: 'boolean'
                }
              },
              additionalProperties: false
            }
          },
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      /**
       * Check if the jsdoc comment is present or not.
       * @param {ASTNode} node node to examine
       * @returns {void}
       */
      /**
       * Report the error message
       * @param {ASTNode} node node to report
       * @returns {void}
       */
      var DEFAULT_OPTIONS, checkJsDoc, options, ref, report, source;
      source = context.getSourceCode();
      DEFAULT_OPTIONS = {
        FunctionDeclaration: true,
        MethodDefinition: false,
        ClassDeclaration: false,
        ArrowFunctionExpression: false,
        FunctionExpression: false
      };
      options = Object.assign(DEFAULT_OPTIONS, ((ref = context.options[0]) != null ? ref.require : void 0) || {});
      report = function(node) {
        return context.report({
          node,
          message: 'Missing JSDoc comment.'
        });
      };
      checkJsDoc = function(node) {
        var jsdocComment;
        jsdocComment = source.getJSDocComment(node);
        if (!jsdocComment) {
          return report(node);
        }
      };
      return {
        FunctionDeclaration: function(node) {
          if (options.FunctionDeclaration) {
            return checkJsDoc(node);
          }
        },
        FunctionExpression: function(node) {
          if ((options.MethodDefinition && node.parent.type === 'MethodDefinition') || (options.FunctionExpression && (node.parent.type === 'VariableDeclarator' || (node.parent.type === 'AssignmentExpression' && node.parent.left.declaration) || (node.parent.type === 'Property' && node === node.parent.value)))) {
            return checkJsDoc(node);
          }
        },
        ClassDeclaration: function(node) {
          if (options.ClassDeclaration) {
            return checkJsDoc(node);
          }
        },
        ArrowFunctionExpression: function(node) {
          if (options.ArrowFunctionExpression && (node.parent.type === 'VariableDeclarator' || (node.parent.type === 'AssignmentExpression' && node.parent.left.declaration) || (node.parent.type === 'Property' && node === node.parent.value))) {
            return checkJsDoc(node);
          }
        }
      };
    }
  };

}).call(this);
