// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to flag unnecessary bind calls
   * @author Bence DÃ¡nyi <bence@danyi.me>
   */
  'use strict';
  var astUtils;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  astUtils = require('../eslint-ast-utils');

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow unnecessary calls to `.bind()`',
        category: 'Best Practices',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-extra-bind'
      },
      schema: [],
      fixable: 'code',
      messages: {
        unexpected: 'The function binding is unnecessary.'
      }
    },
    create: function(context) {
      /**
       * Adds a scope information object to the stack.
       *
       * @param {ASTNode} node - A node to add. This node is a FunctionExpression
       *      or a FunctionDeclaration node.
       * @returns {void}
       */
      /**
       * Reports a given arrow function if the function is callee of `.bind()`
       * method.
       *
       * @param {ASTNode} node - A node to report. This node is an
       *      ArrowFunctionExpression.
       * @returns {void}
       */
      /**
       * Removes the scope information object from the top of the stack.
       * At the same time, this reports the function node if the function has
       * `.bind()` and the `this` keywords found.
       *
       * @param {ASTNode} node - A node to remove. This node is a
       *      FunctionExpression or a FunctionDeclaration node.
       * @returns {void}
       */
      /**
       * Checks whether or not a given function node is the callee of `.bind()`
       * method.
       *
       * e.g. `(function() {}.bind(foo))`
       *
       * @param {ASTNode} node - A node to report. This is a FunctionExpression or
       *      an ArrowFunctionExpression.
       * @returns {boolean} `true` if the node is the callee of `.bind()` method.
       */
      /**
       * Set the mark as the `this` keyword was found in this scope.
       *
       * @returns {void}
       */
      /**
       * Reports a given function node.
       *
       * @param {ASTNode} node - A node to report. This is a FunctionExpression or
       *      an ArrowFunctionExpression.
       * @returns {void}
       */
      var enterFunction, exitArrowFunction, exitFunction, isCalleeOfBindMethod, markAsThisFound, report, scopeInfo;
      scopeInfo = null;
      report = function(node) {
        return context.report({
          node: node.parent.parent,
          messageId: 'unexpected',
          loc: node.parent.property.loc.start,
          fix: function(fixer) {
            var firstTokenToRemove;
            firstTokenToRemove = context.getSourceCode().getFirstTokenBetween(node.parent.object, node.parent.property, astUtils.isNotClosingParenToken);
            return fixer.removeRange([firstTokenToRemove.range[0], node.parent.parent.range[1]]);
          }
        });
      };
      isCalleeOfBindMethod = function(node) {
        var grandparent, parent;
        ({parent} = node);
        grandparent = parent.parent;
        return grandparent && grandparent.type === 'CallExpression' && grandparent.callee === parent && grandparent.arguments.length === 1 && parent.type === 'MemberExpression' && parent.object === node && astUtils.getStaticPropertyName(parent) === 'bind';
      };
      enterFunction = function(node) {
        return scopeInfo = {
          isBound: isCalleeOfBindMethod(node),
          thisFound: false,
          upper: scopeInfo
        };
      };
      exitArrowFunction = function(node) {
        if (isCalleeOfBindMethod(node)) {
          return report(node);
        }
      };
      exitFunction = function(node) {
        if (node.bound) {
          return exitArrowFunction(node);
        }
        if (scopeInfo.isBound && !scopeInfo.thisFound) {
          report(node);
        }
        return scopeInfo = scopeInfo.upper;
      };
      markAsThisFound = function() {
        if (scopeInfo) {
          return scopeInfo.thisFound = true;
        }
      };
      return {
        'ArrowFunctionExpression:exit': exitArrowFunction,
        FunctionDeclaration: enterFunction,
        'FunctionDeclaration:exit': exitFunction,
        FunctionExpression: enterFunction,
        'FunctionExpression:exit': exitFunction,
        ThisExpression: markAsThisFound
      };
    }
  };

}).call(this);
