// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to flag comparison where left part is the same as the right
   * part.
   * @author Ilya Volodin
   */
  'use strict';
  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow comparisons where both sides are exactly the same',
        category: 'Best Practices',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-self-compare'
      },
      schema: []
    },
    create: function(context) {
      /**
       * Determines whether two nodes are composed of the same tokens.
       * @param {ASTNode} nodeA The first node
       * @param {ASTNode} nodeB The second node
       * @returns {boolean} true if the nodes have identical token representations
       */
      var hasSameTokens, sourceCode;
      sourceCode = context.getSourceCode();
      hasSameTokens = function(nodeA, nodeB) {
        var tokensA, tokensB;
        tokensA = sourceCode.getTokens(nodeA);
        tokensB = sourceCode.getTokens(nodeB);
        return tokensA.length === tokensB.length && tokensA.every(function(token, index) {
          return token.type === tokensB[index].type && token.value === tokensB[index].value;
        });
      };
      return {
        BinaryExpression: function(node) {
          var operators;
          operators = new Set(['is', '==', 'isnt', '!=', '>', '<', '>=', '<=']);
          if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {
            return context.report({
              node,
              message: 'Comparing to itself is potentially pointless.'
            });
          }
        }
      };
    }
  };

}).call(this);
