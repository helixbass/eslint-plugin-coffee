// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Disallow use of multiple spaces.
   * @author Nicholas C. Zakas
   */
  'use strict';
  var astUtils;

  astUtils = require('../eslint-ast-utils');

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow multiple spaces',
        category: 'Best Practices',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-multi-spaces'
      },
      fixable: 'whitespace',
      schema: [
        {
          type: 'object',
          properties: {
            exceptions: {
              type: 'object',
              patternProperties: {
                '^([A-Z][a-z]*)+$': {
                  type: 'boolean'
                }
              },
              additionalProperties: false
            },
            ignoreEOLComments: {
              type: 'boolean'
            }
          },
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      /**
       * Formats value of given comment token for error message by truncating its length.
       * @param {Token} token comment token
       * @returns {string} formatted value
       * @private
       */
      var exceptions, formatReportedCommentValue, hasExceptions, ignoreEOLComments, options, sourceCode;
      sourceCode = context.getSourceCode();
      options = context.options[0] || {};
      ({ignoreEOLComments} = options);
      exceptions = {
        Property: true,
        ...options.exceptions
      };
      hasExceptions = Object.keys(exceptions).filter(function(key) {
        return exceptions[key];
      }).length > 0;
      formatReportedCommentValue = function(token) {
        var formattedValue, value, valueLines;
        valueLines = token.value.split('\n');
        value = valueLines[0];
        formattedValue = `${value.slice(0, 12)}...`;
        if (valueLines.length === 1 && value.length <= 12) {
          return value;
        } else {
          return formattedValue;
        }
      };
      return {
        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------
        Program: function() {
          return sourceCode.tokensAndComments.forEach(function(leftToken, leftIndex, tokensAndComments) {
            var displayValue, parentNode, rightToken;
            if (leftIndex === tokensAndComments.length - 1) {
              return;
            }
            rightToken = tokensAndComments[leftIndex + 1];
            // Ignore tokens that don't have 2 spaces between them or are on different lines
            if (!sourceCode.text.slice(leftToken.range[1], rightToken.range[0]).includes('  ') || leftToken.loc.end.line < rightToken.loc.start.line) {
              return;
            }
            // Ignore comments that are the last token on their line if `ignoreEOLComments` is active.
            if (ignoreEOLComments && astUtils.isCommentToken(rightToken) && (leftIndex === tokensAndComments.length - 2 || rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line)) {
              return;
            }
            // Ignore tokens that are in a node in the "exceptions" object
            if (hasExceptions) {
              parentNode = sourceCode.getNodeByRangeIndex(rightToken.range[0] - 1);
              if (parentNode && exceptions[parentNode.type]) {
                return;
              }
            }
            if (rightToken.type === 'Block') {
              displayValue = `###${formatReportedCommentValue(rightToken)}###`;
            } else if (rightToken.type === 'Line') {
              displayValue = `#${formatReportedCommentValue(rightToken)}`;
            } else {
              displayValue = rightToken.value;
            }
            return context.report({
              node: rightToken,
              loc: rightToken.loc.start,
              message: "Multiple spaces found before '{{displayValue}}'.",
              data: {displayValue},
              fix: function(fixer) {
                return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], ' ');
              }
            });
          });
        }
      };
    }
  };

}).call(this);
