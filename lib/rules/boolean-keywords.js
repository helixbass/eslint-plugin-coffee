// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview This rule should require or disallow usage of specific boolean keywords.
   * @author Julian Rosse
   */
  'use strict';
  var ALL_KEYWORDS, FALSE_KEYWORDS, TRUE_KEYWORDS,
    indexOf = [].indexOf;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  TRUE_KEYWORDS = ['true', 'yes', 'on'];

  FALSE_KEYWORDS = ['false', 'no', 'off'];

  ALL_KEYWORDS = [...TRUE_KEYWORDS, ...FALSE_KEYWORDS];

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'enforce consistent usage of English operators',
        category: 'Stylistic Issues',
        recommended: false
      },
      // url: 'https://eslint.org/docs/rules/space-unary-ops'
      schema: [
        {
          anyOf: [
            {
              type: 'object',
              properties: {
                allow: {
                  type: 'array',
                  items: [
                    {
                      enum: ALL_KEYWORDS
                    }
                  ],
                  minItems: 2
                }
              },
              additionalProperties: false
            },
            {
              type: 'object',
              properties: {
                disallow: {
                  type: 'array',
                  items: [
                    {
                      enum: ALL_KEYWORDS
                    }
                  ],
                  minItems: 1
                }
              },
              additionalProperties: false
            }
          ]
        }
      ],
      messages: {
        'unexpected-fixable': "Prefer '{{ replacement }}' to '{{ unexpected }}'",
        unexpected: "Don't use '{{ unexpected }}'"
      },
      fixable: 'code'
    },
    create: function(context) {
      var allow, disallow, getReplacement;
      ({allow, disallow} = context.options[0]);
      getReplacement = function(trueOrFalse) {
        var allKeywords, allowedKeywords, replacement;
        allKeywords = trueOrFalse ? TRUE_KEYWORDS : FALSE_KEYWORDS;
        allowedKeywords = allow != null ? allKeywords.filter(function(keyword) {
          return indexOf.call(allow, keyword) >= 0;
        }) : allKeywords.filter(function(keyword) {
          return indexOf.call(disallow, keyword) < 0;
        });
        if (allowedKeywords.length !== 1) {
          return;
        }
        [replacement] = allowedKeywords;
        return replacement;
      };
      return {
        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------
        Literal: function(node) {
          var name, ref, replacement;
          if ((ref = node.value) !== true && ref !== false) {
            return;
          }
          ({name} = node);
          if ((allow != null) && indexOf.call(allow, name) >= 0) {
            return;
          }
          if ((disallow != null) && indexOf.call(disallow, name) < 0) {
            return;
          }
          replacement = getReplacement(indexOf.call(TRUE_KEYWORDS, name) >= 0);
          if (replacement) {
            return context.report({
              node,
              messageId: 'unexpected-fixable',
              data: {
                unexpected: name,
                replacement
              },
              fix: function(fixer) {
                return fixer.replaceText(node, replacement);
              }
            });
          }
          return context.report({
            node,
            messageId: 'unexpected',
            data: {
              unexpected: name
            }
          });
        }
      };
    }
  };

}).call(this);
