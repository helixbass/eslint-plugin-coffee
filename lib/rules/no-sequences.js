// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to check for sequences using the semicolon operator
   * @author Julian Rosse
   */
  'use strict';
  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow sequences using semicolons',
        // category: 'Best Practices'
        recommended: false
      },
      // url: 'https://eslint.org/docs/rules/block-scoped-var'
      schema: []
    },
    create: function(context) {
      var check, semiTokens, sourceCode;
      sourceCode = context.getSourceCode();
      semiTokens = sourceCode.tokensAndComments.filter(function({value}) {
        return value === ';';
      });
      check = function(node) {
        var body, currentSemi, currentSemiIndex, expression, i, index, j, len, ref, ref1, semiToken, semisInRange;
        if (!semiTokens.length) {
          return;
        }
        body = (ref = node.body) != null ? ref : node.expressions;
        if (!((body != null ? body.length : void 0) > 1)) {
          return;
        }
        semisInRange = [];
        for (i = 0, len = semiTokens.length; i < len; i++) {
          semiToken = semiTokens[i];
          if (!(semiToken.range[1] < node.range[1])) {
            break;
          }
          if (!(semiToken.range[0] > node.range[0])) {
            continue;
          }
          semisInRange.push(semiToken);
        }
        if (!semisInRange.length) {
          return;
        }
        currentSemiIndex = 0;
        for (index = j = 0, ref1 = body.length - 1; (0 <= ref1 ? j < ref1 : j > ref1); index = 0 <= ref1 ? ++j : --j) {
          expression = body[index];
          while ((currentSemi = semisInRange[currentSemiIndex]).range[0] < expression.range[0]) {
            currentSemiIndex++;
            if (currentSemiIndex >= semisInRange.length - 1) {
              return;
            }
          }
          if (!(currentSemi.range[0] >= expression.range[1])) {
            continue;
          }
          if (currentSemi.range[1] <= body[index + 1].range[0]) {
            context.report({
              node: currentSemi,
              message: "Don't use sequences"
            });
            return;
          }
        }
      };
      return {
        Program: check,
        BlockStatement: check,
        SequenceExpression: check
      };
    }
  };

}).call(this);
