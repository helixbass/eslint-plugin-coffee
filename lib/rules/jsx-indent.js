// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Validate JSX indentation
   * @author Yannick Croissant
   * This rule has been ported and modified from eslint and nodeca.
   * @author Vitaly Puzrin
   * @author Gyandeep Singh
   * @copyright 2015 Vitaly Puzrin. All rights reserved.
   * @copyright 2015 Gyandeep Singh. All rights reserved.
   Copyright (C) 2014 by Vitaly Puzrin

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the 'Software'), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   */
  'use strict';
  var astUtil, docsUrl;

  astUtil = require('../util/react/ast');

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  // ------------------------------------------------------------------------------
  // Rule Definition
  // ------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'Validate JSX indentation',
        category: 'Stylistic Issues',
        recommended: false,
        url: docsUrl('jsx-indent')
      },
      fixable: 'whitespace',
      schema: [
        {
          oneOf: [
            {
              enum: ['tab']
            },
            {
              type: 'integer'
            }
          ]
        }
      ]
    },
    create: function(context) {
      /**
       * Responsible for fixing the indentation issue fix
       * @param {ASTNode} node Node violating the indent rule
       * @param {Number} needed Expected indentation character count
       * @returns {Function} function to be executed by the fixer
       * @private
       */
      /**
       * Get node indent
       * @param {ASTNode} node Node to examine
       * @param {Boolean} byLastLine get indent of node's last line
       * @param {Boolean} excludeCommas skip comma on start of line
       * @return {Number} Indent
       */
      /**
       * Reports a given indent violation and properly pluralizes the message
       * @param {ASTNode} node Node violating the indent rule
       * @param {Number} needed Expected indentation character count
       * @param {Number} gotten Indentation character count in the actual node/code
       * @param {Object} loc Error line and column location
       */
      var MESSAGE, checkNodesIndent, extraColumnStart, getFixerFunction, getNodeIndent, handleClosingElement, handleOpeningElement, indentChar, indentSize, indentType, report, sourceCode;
      MESSAGE = 'Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.';
      extraColumnStart = 0;
      indentType = 'space';
      indentSize = 4;
      sourceCode = context.getSourceCode();
      if (context.options.length) {
        if (context.options[0] === 'tab') {
          indentSize = 1;
          indentType = 'tab';
        } else if (typeof context.options[0] === 'number') {
          indentSize = context.options[0];
          indentType = 'space';
        }
      }
      indentChar = indentType === 'space' ? ' ' : '\t';
      getFixerFunction = function(node, needed) {
        return function(fixer) {
          var indent;
          indent = Array(needed + 1).join(indentChar);
          return fixer.replaceTextRange([node.range[0] - node.loc.start.column, node.range[0]], indent);
        };
      };
      report = function(node, needed, gotten, loc) {
        var msgContext;
        msgContext = {
          needed,
          type: indentType,
          characters: needed === 1 ? 'character' : 'characters',
          gotten
        };
        if (loc) {
          return context.report({
            node,
            loc,
            message: MESSAGE,
            data: msgContext,
            fix: getFixerFunction(node, needed)
          });
        } else {
          return context.report({
            node,
            message: MESSAGE,
            data: msgContext,
            fix: getFixerFunction(node, needed)
          });
        }
      };
      getNodeIndent = function(node, byLastLine, excludeCommas) {
        var indent, lines, regExp, skip, src;
        byLastLine || (byLastLine = false);
        excludeCommas || (excludeCommas = false);
        src = sourceCode.getText(node, node.loc.start.column + extraColumnStart);
        lines = src.split('\n');
        if (byLastLine) {
          src = lines[lines.length - 1];
        } else {
          src = lines[0];
        }
        skip = excludeCommas ? ',' : '';
        if (indentType === 'space') {
          regExp = new RegExp(`^[ ${skip}]+`);
        } else {
          regExp = new RegExp(`^[\t${skip}]+`);
        }
        indent = regExp.exec(src);
        if (indent) {
          return indent[0].length;
        } else {
          return 0;
        }
      };
      // ###*
      // # Check if the node is the right member of a logical expression
      // # @param {ASTNode} node The node to check
      // # @return {Boolean} true if its the case, false if not
      // ###
      // isRightInLogicalExp = (node) ->
      //   node.parent?.parent?.type is 'LogicalExpression' and
      //   node.parent.parent.right is node.parent

      // ###*
      // # Check if the node is the alternate member of a conditional expression
      // # @param {ASTNode} node The node to check
      // # @return {Boolean} true if its the case, false if not
      // ###
      // isAlternateInConditionalExp = (node) ->
      //   node.parent?.parent?.type is 'ConditionalExpression' and
      //   node.parent.parent.alternate is node.parent and
      //   sourceCode.getTokenBefore(node).value isnt '('
      /**
       * Check indent for nodes list
       * @param {ASTNode} node The node to check
       * @param {Number} indent needed indent
       * @param {Boolean} excludeCommas skip comma on start of line
       */
      checkNodesIndent = function(node, indent, excludeCommas) {
        var nodeIndent;
        nodeIndent = getNodeIndent(node, false, excludeCommas);
        // isCorrectRightInLogicalExp =
        //   isRightInLogicalExp(node) and nodeIndent - indent is indentSize
        // isCorrectAlternateInCondExp =
        //   isAlternateInConditionalExp(node) and nodeIndent - indent is 0
        if (nodeIndent !== indent && astUtil.isNodeFirstInLine(context, node)) { // and # not isCorrectRightInLogicalExp and
          // not isCorrectAlternateInCondExp
          return report(node, indent, nodeIndent);
        }
      };
      handleOpeningElement = function(node) {
        var indent, parentElementIndent, prevToken, ref;
        prevToken = sourceCode.getTokenBefore(node);
        if (!prevToken) {
          return;
        }
        // Use the parent in a list or an array
        if (prevToken.type === 'JSXText') { // or # (prevToken.type is 'Punctuator' and prevToken.value is ',')
          prevToken = sourceCode.getNodeByRangeIndex(prevToken.range[0]);
          prevToken = (ref = prevToken.type) === 'Literal' || ref === 'JSXText' ? prevToken.parent : prevToken;
        }
        if (prevToken.type === 'JSXExpressionContainer') {
          // Use the first non-punctuator token in a conditional expression
          // else if prevToken.type is 'Punctuator' and prevToken.value is ':'
          //   prevToken = sourceCode.getTokenBefore prevToken

          //     while prevToken.type is 'Punctuator' and prevToken.value isnt '/'
          //       prevToken = sourceCode.getTokenBefore prevToken

          //   prevToken = sourceCode.getNodeByRangeIndex prevToken.range[0]

          //     while (
          //       prevToken.parent and
          //       prevToken.parent.type isnt 'ConditionalExpression'
          //     )
          //       prevToken = prevToken.parent
          prevToken = prevToken.expression;
        }
        parentElementIndent = getNodeIndent(prevToken);
        // isRightInLogicalExp(node) or
        // isAlternateInConditionalExp node
        indent = (node.parent.parent.type === 'ExpressionStatement' && node.parent.parent.parent.type === 'BlockStatement' && node.parent.parent.parent.body.length > 1 && node.parent.parent !== node.parent.parent.parent.body[0]) ? 0 : (prevToken.loc.start.line === node.loc.start.line) ? 0 : indentSize; // or
        return checkNodesIndent(node, parentElementIndent + indent);
      };
      handleClosingElement = function(node) {
        var peerElementIndent;
        if (!node.parent) {
          return;
        }
        peerElementIndent = getNodeIndent(node.parent.openingElement || node.parent.openingFragment);
        return checkNodesIndent(node, peerElementIndent);
      };
      return {
        JSXOpeningElement: handleOpeningElement,
        JSXOpeningFragment: handleOpeningElement,
        JSXClosingElement: handleClosingElement,
        JSXClosingFragment: handleClosingElement,
        JSXExpressionContainer: function(node) {
          var parentNodeIndent;
          if (!node.parent) {
            return;
          }
          parentNodeIndent = getNodeIndent(node.parent);
          return checkNodesIndent(node, parentNodeIndent + indentSize);
        }
      };
    }
  };

}).call(this);
