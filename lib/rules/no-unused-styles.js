// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Detects unused styles
   * @author Tom Hastjarjanto
   */
  'use strict';
  var Components, StyleSheets, astHelpers, styleSheet,
    hasProp = {}.hasOwnProperty;

  Components = require('../util/react/Components');

  styleSheet = require('../util/react-native/stylesheet');

  // styleSheet = require 'eslint-plugin-react-native/lib/util/stylesheet'
  ({StyleSheets, astHelpers} = styleSheet);

  module.exports = Components.detect(function(context, components) {
    var checkAssignment, reportUnusedStyles, styleReferences, styleSheets;
    styleSheets = new StyleSheets();
    styleReferences = new Set();
    reportUnusedStyles = function(unusedStyles) {
      var key, results, styles;
      results = [];
      for (key in unusedStyles) {
        if (!hasProp.call(unusedStyles, key)) continue;
        styles = unusedStyles[key];
        // eslint-disable-next-line coffee/no-loop-func
        results.push(styles.forEach(function(node) {
          var message;
          message = ['Unused style detected: ', key, '.', node.key.name].join('');
          return context.report(node, message);
        }));
      }
      return results;
    };
    checkAssignment = function(node) {
      var styleSheetName, styles;
      if (astHelpers.isStyleSheetDeclaration(node)) {
        styleSheetName = astHelpers.getStyleSheetName(node);
        styles = astHelpers.getStyleDeclarations(node);
        return styleSheets.add(styleSheetName, styles);
      }
    };
    return {
      MemberExpression: function(node) {
        var styleRef;
        styleRef = astHelpers.getPotentialStyleReferenceFromMemberExpression(node);
        if (styleRef) {
          return styleReferences.add(styleRef);
        }
      },
      VariableDeclarator: checkAssignment,
      AssignmentExpression: checkAssignment,
      'Program:exit': function() {
        var list;
        list = components.list();
        if (Object.keys(list).length > 0) {
          styleReferences.forEach(function(reference) {
            return styleSheets.markAsUsed(reference);
          });
          return reportUnusedStyles(styleSheets.getUnusedReferences());
        }
      }
    };
  });

  module.exports.schema = [];

}).call(this);
