// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Enforce event handler naming conventions in JSX
   * @author Jake Marsh
   */
  'use strict';
  var docsUrl;

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  // ------------------------------------------------------------------------------
  // Rule Definition
  // ------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'Enforce event handler naming conventions in JSX',
        category: 'Stylistic Issues',
        recommended: false,
        url: docsUrl('jsx-handler-names')
      },
      schema: [
        {
          type: 'object',
          properties: {
            eventHandlerPrefix: {
              type: 'string'
            },
            eventHandlerPropPrefix: {
              type: 'string'
            }
          },
          additionalProperties: false
        }
      ]
    },
    create: function(context) {
      var EVENT_HANDLER_REGEX, PROP_EVENT_HANDLER_REGEX, configuration, eventHandlerPrefix, eventHandlerPropPrefix, sourceCode;
      sourceCode = context.getSourceCode();
      configuration = context.options[0] || {};
      eventHandlerPrefix = configuration.eventHandlerPrefix || 'handle';
      eventHandlerPropPrefix = configuration.eventHandlerPropPrefix || 'on';
      EVENT_HANDLER_REGEX = new RegExp(`^((props\\.${eventHandlerPropPrefix})|((.*\\.)?${eventHandlerPrefix}))[A-Z].*$`);
      PROP_EVENT_HANDLER_REGEX = new RegExp(`^(${eventHandlerPropPrefix}[A-Z].*|ref)$`);
      return {
        JSXAttribute: function(node) {
          var propFnIsNamedCorrectly, propIsEventHandler, propKey, propValue, ref, ref1;
          if (!((ref = node.value) != null ? (ref1 = ref.expression) != null ? ref1.object : void 0 : void 0)) {
            return;
          }
          propKey = typeof node.name === 'object' ? node.name.name : node.name;
          propValue = sourceCode.getText(node.value.expression).replace(/^this\.|.*::|@/, '');
          if (propKey === 'ref') {
            return;
          }
          propIsEventHandler = PROP_EVENT_HANDLER_REGEX.test(propKey);
          propFnIsNamedCorrectly = EVENT_HANDLER_REGEX.test(propValue);
          if (propIsEventHandler && !propFnIsNamedCorrectly) {
            return context.report({
              node,
              message: `Handler function for ${propKey} prop key must begin with '${eventHandlerPrefix}'`
            });
          } else if (propFnIsNamedCorrectly && !propIsEventHandler) {
            return context.report({
              node,
              message: `Prop key for ${propValue} must begin with '${eventHandlerPropPrefix}'`
            });
          }
        }
      };
    }
  };

}).call(this);
