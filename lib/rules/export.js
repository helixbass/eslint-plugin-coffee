// Generated by CoffeeScript 2.5.0
(function() {
  var ExportMap, recursivePatternCapture;

  ({
    default: ExportMap,
    recursivePatternCapture
  } = require('eslint-plugin-import/lib/ExportMap'));

  // import docsUrl from '../docsUrl'
  module.exports = {
    meta: {
      docs: {
        // url: docsUrl 'export'
        url: ''
      }
    },
    create: function(context) {
      var addNamed, named;
      named = new Map();
      addNamed = function(name, node) {
        var nodes;
        nodes = named.get(name);
        if (nodes == null) {
          nodes = new Set();
          named.set(name, nodes);
        }
        return nodes.add(node);
      };
      return {
        ExportDefaultDeclaration: function(node) {
          return addNamed('default', node);
        },
        ExportSpecifier: function(node) {
          return addNamed(node.exported.name, node.exported);
        },
        ExportNamedDeclaration: function(node) {
          var declaration, ref;
          if (node.declaration == null) {
            return;
          }
          if (node.declaration.id != null) {
            addNamed(node.declaration.id.name, node.declaration.id);
          }
          if (node.declaration.declarations != null) {
            ref = node.declaration.declarations;
            for (declaration of ref) {
              recursivePatternCapture(declaration.id, function(v) {
                return addNamed(v.name, v);
              });
            }
          }
          if (node.declaration.type === 'AssignmentExpression') {
            return recursivePatternCapture(node.declaration.left, function(v) {
              return addNamed(v.name, v);
            });
          }
        },
        ExportAllDeclaration: function(node) {
          var any, remoteExports;
          if (node.source == null) {
            return; // not sure if this is ever true
          }
          remoteExports = ExportMap.get(node.source.value, context);
          if (remoteExports == null) {
            return;
          }
          if (remoteExports.errors.length) {
            remoteExports.reportErrors(context, node);
            return;
          }
          any = false;
          remoteExports.forEach(function(v, name) { // poor man's filter
            return name !== 'default' && (any = true) && addNamed(name, node);
          });
          if (!any) {
            return context.report(node.source, `No named exports found in module '${node.source.value}'.`);
          }
        },
        'Program:exit': function() {
          var name, node, nodes, results, x;
          results = [];
          for (x of named) {
            [name, nodes] = x;
            if (nodes.size > 1) {
              results.push((function() {
                var results1;
                results1 = [];
                for (node of nodes) {
                  if (name === 'default') {
                    results1.push(context.report(node, 'Multiple default exports.'));
                  } else {
                    results1.push(context.report(node, `Multiple exports of name '${name}'.`));
                  }
                }
                return results1;
              })());
            }
          }
          return results;
        }
      };
    }
  };

}).call(this);
