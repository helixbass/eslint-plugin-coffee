// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Flag shouldComponentUpdate when extending PureComponent
   */
  'use strict';
  var Components, astUtil, docsUrl, errorMessage, isDeclarationAssignment;

  Components = require('../util/react/Components');

  astUtil = require('../util/react/ast');

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  ({isDeclarationAssignment} = require('../util/ast-utils'));

  errorMessage = function(node) {
    return `${node} does not need shouldComponentUpdate when extending React.PureComponent.`;
  };

  // ------------------------------------------------------------------------------
  // Rule Definition
  // ------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'Flag shouldComponentUpdate when extending PureComponent',
        category: 'Possible Errors',
        recommended: false,
        url: docsUrl('no-redundant-should-component-update')
      },
      schema: []
    },
    create: Components.detect(function(context, components, utils) {
      /**
       * Checks for violation of rule
       * @param {ASTNode} node The AST node being checked.
       */
      /**
       * Get name of node if available
       * @param {ASTNode} node The AST node being checked.
       * @return {String} The name of the node
       */
      /**
       * Checks for shouldComponentUpdate property
       * @param {ASTNode} node The AST node being checked.
       * @returns {Boolean} Whether or not the property exists.
       */
      var checkForViolation, getNodeName, hasShouldComponentUpdate;
      hasShouldComponentUpdate = function(node) {
        var properties;
        properties = astUtil.getComponentProperties(node);
        return properties.some(function(property) {
          var name;
          name = astUtil.getPropertyName(property);
          return name === 'shouldComponentUpdate';
        });
      };
      getNodeName = function(node) {
        var ref, ref1;
        if (node.id) {
          return node.id.name;
        } else if ((ref = node.parent) != null ? ref.id : void 0) {
          return node.parent.id.name;
        } else if (isDeclarationAssignment(node.parent)) {
          return (ref1 = node.parent.left.name) != null ? ref1 : '';
        }
        return '';
      };
      checkForViolation = function(node) {
        var className, hasScu;
        if (utils.isPureComponent(node)) {
          hasScu = hasShouldComponentUpdate(node);
          if (hasScu) {
            className = getNodeName(node);
            return context.report({
              node,
              message: errorMessage(className)
            });
          }
        }
      };
      return {
        ClassDeclaration: checkForViolation,
        ClassExpression: checkForViolation
      };
    })
  };

}).call(this);
