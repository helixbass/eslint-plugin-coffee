// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Ensure proper position of the first property in JSX
   * @author Joachim Seminck
   */
  'use strict';
  var docsUrl;

  docsUrl = require('eslint-plugin-react/lib/util/docsUrl');

  // ------------------------------------------------------------------------------
  // Rule Definition
  // ------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'Ensure proper position of the first property in JSX',
        category: 'Stylistic Issues',
        recommended: false,
        url: docsUrl('jsx-first-prop-new-line')
      },
      // fixable: 'code'
      schema: [
        {
          enum: ['always',
        'never',
        'multiline',
        'multiline-multiprop']
        }
      ]
    },
    create: function(context) {
      var configuration, isMultilineJSX;
      configuration = context.options[0] || 'multiline-multiprop';
      isMultilineJSX = function(jsxNode) {
        return jsxNode.loc.start.line < jsxNode.loc.end.line;
      };
      return {
        JSXOpeningElement: function(node) {
          var firstNode;
          if ((configuration === 'multiline' && isMultilineJSX(node)) || (configuration === 'multiline-multiprop' && isMultilineJSX(node) && node.attributes.length > 1) || configuration === 'always') {
            return node.attributes.some(function(decl) {
              if (decl.loc.start.line === node.loc.start.line) {
                context.report({
                  node: decl,
                  message: 'Property should be placed on a new line'
                });
              }
              // fix: (fixer) ->
              //   fixer.replaceTextRange [node.name.end, decl.range[0]], '\n'
              return true;
            });
          } else if (configuration === 'never' && node.attributes.length > 0) {
            firstNode = node.attributes[0];
            if (node.loc.start.line < firstNode.loc.start.line) {
              return context.report({
                node: firstNode,
                message: 'Property should be placed on the same line as the component declaration'
              });
            }
          }
        }
      };
    }
  };

  // fix: (fixer) ->
//   fixer.replaceTextRange [node.name.end, firstNode.range[0]], ' '

}).call(this);
