// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Rule to disallow unnecessary computed property keys in object literals
   * @author Burak Yigit Kaya
   */
  'use strict';
  var MESSAGE_UNNECESSARY_COMPUTED, astUtils, lodash;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  lodash = require('lodash');

  astUtils = require('../eslint-ast-utils');

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  MESSAGE_UNNECESSARY_COMPUTED = 'Unnecessarily computed property [{{property}}] found.';

  module.exports = {
    meta: {
      type: 'suggestion',
      docs: {
        description: 'disallow unnecessary computed property keys in objects and classes',
        category: 'ECMAScript 6',
        recommended: false,
        url: 'https://eslint.org/docs/rules/no-useless-computed-key'
      },
      schema: [
        {
          type: 'object',
          properties: {
            enforceForClassMembers: {
              type: 'boolean',
              default: false
            }
          },
          additionalProperties: false
        }
      ],
      fixable: 'code'
    },
    create: function(context) {
      /**
       * Reports a given node if it violated this rule.
       * @param {ASTNode} node The node to check.
       * @returns {void}
       */
      var check, enforceForClassMembers, ref, sourceCode;
      sourceCode = context.getSourceCode();
      enforceForClassMembers = (ref = context.options[0]) != null ? ref.enforceForClassMembers : void 0;
      check = function(node) {
        var allowedKey, key, nodeType;
        if (!node.computed) {
          return;
        }
        if (node.shorthand) {
          return;
        }
        ({key} = node);
        nodeType = typeof key.value;
        if (node.type === 'MethodDefinition') {
          allowedKey = node.static ? 'prototype' : 'constructor';
        } else {
          allowedKey = '__proto__';
        }
        if (key.type === 'Literal' && (nodeType === 'string' || nodeType === 'number') && key.value !== allowedKey) {
          return context.report({
            node,
            message: MESSAGE_UNNECESSARY_COMPUTED,
            data: {
              property: sourceCode.getText(key)
            },
            fix: function(fixer) {
              var leftSquareBracket, needsSpaceBeforeKey, replacementKey, rightSquareBracket, tokenBeforeLeftBracket, tokensBetween;
              leftSquareBracket = sourceCode.getFirstToken(node, astUtils.isOpeningBracketToken);
              rightSquareBracket = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isClosingBracketToken);
              tokensBetween = sourceCode.getTokensBetween(leftSquareBracket, rightSquareBracket, 1);
              if (tokensBetween.slice(0, -1).some(function(token, index) {
                return sourceCode.getText().slice(token.range[1], tokensBetween[index + 1].range[0]).trim();
              })) {
                // If there are comments between the brackets and the property name, don't do a fix.
                return null;
              }
              tokenBeforeLeftBracket = sourceCode.getTokenBefore(leftSquareBracket);
              // Insert a space before the key to avoid changing identifiers, e.g. ({ get[2]() {} }) to ({ get2() {} })
              needsSpaceBeforeKey = tokenBeforeLeftBracket.range[1] === leftSquareBracket.range[0] && !astUtils.canTokensBeAdjacent(tokenBeforeLeftBracket, sourceCode.getFirstToken(key));
              replacementKey = (needsSpaceBeforeKey ? ' ' : '') + key.raw;
              return fixer.replaceTextRange([leftSquareBracket.range[0], rightSquareBracket.range[1]], replacementKey);
            }
          });
        }
      };
      return {
        Property: check,
        MethodDefinition: enforceForClassMembers ? check : lodash.noop
      };
    }
  };

}).call(this);
