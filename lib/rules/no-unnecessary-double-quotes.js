// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Prevent usage of unnecessary double quotes.
   * @author Julian Rosse
   */
  'use strict';
  var find, getDirectives, isDirective, isJsxAttributeValue, isString, looksLikeDirective, takeWhile;

  ({isString} = require('lodash'));

  ({find} = require('lodash/fp'));

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  looksLikeDirective = function(node) {
    return node.type === 'ExpressionStatement' && node.expression.type === 'Literal' && typeof node.expression.value === 'string';
  };

  takeWhile = function(predicate, list) {
    var i, index, item, len;
    for (index = i = 0, len = list.length; i < len; index = ++i) {
      item = list[index];
      if (!predicate(item)) {
        return list.slice(0, index);
      }
    }
    return list.slice();
  };

  getDirectives = function(node) {
    return takeWhile(looksLikeDirective, node.body);
  };

  isDirective = function(node, ancestors) {
    var grandparent, greatgrandparent;
    if (!(ancestors.length >= 2)) {
      return false;
    }
    grandparent = ancestors[ancestors.length - 2];
    greatgrandparent = ancestors[ancestors.length - 3];
    return grandparent.type === 'Program' || (grandparent.type === 'BlockStatement' && /Function/.test(greatgrandparent.type) && getDirectives(grandparent).indexOf(node.parent) >= 0);
  };

  isJsxAttributeValue = function(node) {
    return node.parent.type === 'JSXAttribute';
  };

  module.exports = {
    meta: {
      docs: {
        description: 'Prevent usage of unnecessary double quotes.',
        category: 'Stylistic Issues',
        recommended: false
      },
      // url: 'https://eslint.org/docs/rules/object-curly-spacing'
      schema: [],
      messages: {
        noDoubleQuotes: 'Prefer single quotes.'
      }
    },
    create: function(context) {
      return {
        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------
        Literal: function(node) {
          if (!isString(node.value)) {
            return;
          }
          if (isJsxAttributeValue(node)) {
            return;
          }
          if (isDirective(node, context.getAncestors())) {
            return;
          }
          if (!/^"/.test(node.extra.raw)) {
            return;
          }
          if (/'/.test(node.value)) {
            return;
          }
          return context.report({
            node,
            messageId: 'noDoubleQuotes'
          });
        },
        TemplateLiteral: function(node) {
          var expressions, quasis, quote;
          ({expressions, quote, quasis} = node);
          if (expressions != null ? expressions.length : void 0) {
            return;
          }
          if (/^'/.test(quote)) {
            return;
          }
          if (find(function({value}) {
            return /'/.test(value != null ? value.raw : void 0);
          })(quasis)) {
            return;
          }
          return context.report({
            node,
            messageId: 'noDoubleQuotes'
          });
        }
      };
    }
  };

}).call(this);
