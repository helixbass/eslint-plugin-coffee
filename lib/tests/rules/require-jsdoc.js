// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Test file for require-jsdoc rule
   * @author Gyandeep Singh
   */
  'use strict';
  var RuleTester, path, rule, ruleTester;

  rule = require('../../rules/require-jsdoc');

  ({RuleTester} = require('eslint'));

  path = require('path');

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  ruleTester.run('require-jsdoc', rule, {
    valid: [
      `array = [1,2,3]
array.forEach ->`,
      `###*
 @class MyClass
###
MyClass = ->`,
      `###*
 Function doing something
###
myFunction = ->`,
      `###*
 Function doing something
###
myFunction = ->`,
      `###*
 Function doing something
###
Object.myFunction = ->`,
      `obj = 
  ###*
  # Function doing something
  ###
  myFunction: ->`,
      `###*
# @func myFunction 
###
myFunction = ->`,
      `###*
# @method myFunction
###
myFunction = ->`,
      `###*
# @function myFunction
###
myFunction = ->`,
      `###*
 @func myFunction 
###
myFunction = ->`,
      `###*
# @method myFunction
###
myFunction = ->`,
      `###*
# @function myFunction
###
myFunction = ->`,
      `###*
# @func myFunction 
###
Object.myFunction = ->`,
      `###*
# @method myFunction
###
Object.myFunction = ->`,
      `###*
# @function myFunction
###
Object.myFunction = ->`,
      'do ->',
      `object = 
  ###*
   @func myFunction - Some function 
  ###
  myFunction: ->`,
      `object = {
  ###*
   @method myFunction - Some function 
  ###
  myFunction: ->
}`,
      `object = 
  ###*
   @function myFunction - Some function 
  ###
  myFunction: ->`,
      `array = [1,2,3]
array.filter ->`,
      `Object.keys(@options.rules ? {}).forEach ((name) ->).bind @`,
      `object = { name: 'key'}
Object.keys(object).forEach ->`,
      {
        code: `myFunction = ->`,
        options: [
          {
            require: {
              FunctionExpression: false,
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ]
      },
      {
        code: `###*
 * Description for A.
 ###
class A
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    @a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ]
      },
      {
        code: `###*
 * Description for A.
 ###
class App extends Component
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    super()
    this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ]
      },
      {
        code: `###*
 * Description for A.
 ###
export default class App extends Component
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    super()
    this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ]
      },
      {
        code: `###*
 * Description for A.
 ###
export class App extends Component
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    super()
    this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ]
      },
      {
        code: `class A
  constructor: (xs) ->
    this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: false,
              ClassDeclaration: false
            }
          }
        ]
      },
      {
        code: `###*
# Function doing something
###
myFunction = () => {}`,
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      },
      {
        code: `###*
 Function doing something
###
myFunction = () => () => {}`,
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      },
      {
        code: 'setTimeout((() => {}), 10)',
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      },
      {
        code: `###*
JSDoc Block
###
foo = ->`,
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      },
      {
        code: `foo = 
  ###*
  JSDoc Block
  ###
  bar: ->`,
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      },
      {
        code: `foo = {
  ###*
  JSDoc Block
  ###
  bar: ->
}`,
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      },
      {
        code: ' foo = { [(->)]: 1 }',
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ]
      }
    ],
    invalid: [
      {
        code: `###*
 * Description for A.
 ###
class A
  constructor: (@a) ->`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'FunctionExpression'
          }
        ]
      },
      {
        code: `class A
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    @a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'ClassDeclaration'
          }
        ]
      },
      {
        code: `class A extends B
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    super()
    this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'ClassDeclaration'
          }
        ]
      },
      {
        code: `export class A extends B
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
      super()
      this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'ClassDeclaration'
          }
        ]
      },
      {
        code: `export default class A extends B
  ###*
   * Description for constructor.
   * @param {object[]} xs - xs
   ###
  constructor: (xs) ->
    super()
    this.a = xs`,
        options: [
          {
            require: {
              MethodDefinition: true,
              ClassDeclaration: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'ClassDeclaration'
          }
        ]
      },
      {
        code: 'myFunction = () => {}',
        options: [
          {
            require: {
              ArrowFunctionExpression: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'ArrowFunctionExpression'
          }
        ]
      },
      {
        code: 'myFunction = () => () => {}',
        options: [
          {
            require: {
              ArrowFunctionExpression: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'ArrowFunctionExpression'
          }
        ]
      },
      {
        code: 'foo = ->',
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'FunctionExpression'
          }
        ]
      },
      {
        code: 'foo = bar: ->',
        options: [
          {
            require: {
              FunctionExpression: true
            }
          }
        ],
        errors: [
          {
            message: 'Missing JSDoc comment.',
            type: 'FunctionExpression'
          }
        ]
      }
    ]
  });

}).call(this);
