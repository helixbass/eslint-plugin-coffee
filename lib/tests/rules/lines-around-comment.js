// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Test enforcement of lines around comments.
   * @author Jamund Ferguson
   */
  'use strict';
  var RuleTester, afterMessage, beforeMessage, path, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/lines-around-comment');

  ({RuleTester} = require('eslint'));

  path = require('path');

  afterMessage = 'Expected line after comment.';

  beforeMessage = 'Expected line before comment.';

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  ruleTester.run('lines-around-comment', rule, {
    valid: [
      // default rules
      'bar()\n\n###* block block block\n * block \n ###\n\na = 1',
      'bar()\n\n###* block block block\n * block \n ###\na = 1',
      'bar()\n# line line line \na = 1',
      'bar()\n\n# line line line\na = 1',
      'bar()\n# line line line\n\na = 1',
      {
        // line comments
        code: 'bar()\n# line line line\n\na = 1',
        options: [
          {
            afterLineComment: true
          }
        ]
      },
      {
        code: 'foo()\n\n# line line line\na = 1',
        options: [
          {
            beforeLineComment: true
          }
        ]
      },
      {
        code: 'foo()\n\n# line line line\n\na = 1',
        options: [
          {
            beforeLineComment: true,
            afterLineComment: true
          }
        ]
      },
      {
        code: 'foo()\n\n# line line line\n# line line\n\na = 1',
        options: [
          {
            beforeLineComment: true,
            afterLineComment: true
          }
        ]
      },
      {
        code: '# line line line\n# line line',
        options: [
          {
            beforeLineComment: true,
            afterLineComment: true
          }
        ]
      },
      {
        // block comments
        code: 'bar()\n\n###* A Block comment with a an empty line after\n *\n ###\na = 1',
        options: [
          {
            afterBlockComment: false,
            beforeBlockComment: true
          }
        ]
      },
      {
        code: 'bar()\n\n###* block block block\n * block \n ###\na = 1',
        options: [
          {
            afterBlockComment: false
          }
        ]
      },
      {
        code: '###* \nblock \nblock block\n ###\n### block \n block \n ###',
        options: [
          {
            afterBlockComment: true,
            beforeBlockComment: true
          }
        ]
      },
      {
        code: 'bar()\n\n###* block block block\n * block \n ###\n\na = 1',
        options: [
          {
            afterBlockComment: true,
            beforeBlockComment: true
          }
        ]
      },
      {
        // inline comments (should not ever warn)
        code: 'foo() # An inline comment with a an empty line after\na = 1',
        options: [
          {
            afterLineComment: true,
            beforeLineComment: true
          }
        ]
      },
      {
        code: 'foo()\nbar() ### An inline block comment with a an empty line after\n *\n ###\na = 1',
        options: [
          {
            beforeBlockComment: true
          }
        ]
      },
      {
        // mixed comment (some block & some line)
        code: 'bar()\n\n###* block block block\n * block \n ###\n#line line line\na = 1',
        options: [
          {
            afterBlockComment: true
          }
        ]
      },
      {
        code: 'bar()\n\n###* block block block\n * block \n ###\n#line line line\na = 1',
        options: [
          {
            beforeLineComment: true
          }
        ]
      },
      {
        // check for block start comments
        code: 'a\n\n# line\nb',
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `->   
  # line at block start
  g = 1`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `-># line at block start
  g = 1`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `foo = ->
  # line at block start
  g = 1`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `foo = ->
  # line at block start`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `if yes
  # line at block start
  g = 1`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `if yes

  # line at block start
  g = 1`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `if yes
  bar()
else
  # line at block start`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
    # line at switch case start
    break`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
  
    # line at switch case start
    break`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
    break
    
  else
    # line at switch case start
    break`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
    break
    
  else
  
    # line at switch case start
    break`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `->   
  ### block comment at block start ###
  g = 1`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `->### block comment at block start ###
  g = 1`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `foo = ->
  ### block comment at block start ###
  g = 1`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `if yes
  ### block comment at block start ###
  g = 1`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `if yes
  
  ### block comment at block start ###
  g = 1`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `while yes
  
  ### 
    block comment at block start
  ###
  g = 1`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `class A
  ###*
    * hi
  ###
  constructor: ->`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `class A
  ###*
    * hi
  ###
  constructor: ->`,
        options: [
          {
            allowClassStart: true
          }
        ]
      },
      {
        code: `class A
  ###*
    * hi
  ###
  constructor: ->`,
        options: [
          {
            allowBlockStart: false,
            allowClassStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
    ### block comment at switch case start ###
    break`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
  
    ### block comment at switch case start ###
    break`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch 'foo'
  when 'foo'
    break
  
  else
    ### block comment at switch case start ###
    break`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break
    
  else
  
    ### block comment at switch case start ###
    break`,
        options: [
          {
            allowBlockStart: true
          }
        ]
      },
      {
        code: `->
  g = 91
  # line at block end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `->
  g = 61
  
  
  # line at block end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `foo = ->
  g = 1
  
  
  # line at block end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `if yes
  g = 1
  # line at block end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `if yes
  g = 1
  
  # line at block end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    g = 1
    
    # line at switch case end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    g = 1
    
    # line at switch case end
    `,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break
    
  else
    g = 1
    
    # line at switch case end`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break
    
  else
    g = 1
    
    # line at switch case end
`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        options: [
          {
            afterLineComment: true,
            allowBlockStart: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        options: [
          {
            afterLineComment: true,
            beforeLineComment: true,
            allowBlockStart: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ]
      },
      {
        code: `->
  g = 1
  ### block comment at block end ###`,
        options: [
          {
            beforeBlockComment: false,
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `foo = ->
  g = 1
  ### block comment at block end ###`,
        options: [
          {
            beforeBlockComment: false,
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `if yes
  g = 1
  ### block comment at block end ###`,
        options: [
          {
            beforeBlockComment: false,
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `if yes
  g = 1
  
  ### block comment at block end ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `while yes

  g = 1
  
  ### 
    block comment at block end
  ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `class B
  constructor: ->
  
  ###*
    * hi
  ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `class B
  constructor: ->
  
  ###*
  * hi
  ###`,
        options: [
          {
            afterBlockComment: true,
            allowClassEnd: true
          }
        ]
      },
      {
        code: `class B
  constructor: ->
  
  ###*
  * hi
  ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: false,
            allowClassEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    g = 1
    
    ### block comment at switch case end ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    g = 1
    
    ### block comment at switch case end ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break
    
  else
    g = 1
    
    ### block comment at switch case end ###`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break
    
  else
    g = 1
    
    ### block comment at switch case end ###
`,
        options: [
          {
            afterBlockComment: true,
            allowBlockEnd: true
          }
        ]
      },
      {
        // check for object start comments
        code: `obj = {
  # line at object start
  g: 1
}`,
        options: [
          {
            beforeLineComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        code: `->
  return {
    # hi
    test: ->
  }`,
        options: [
          {
            beforeLineComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        // ,
        //   code: '''
        //     obj =
        //       ### block comment at object start###
        //       g: 1
        //   '''
        //   options: [
        //     beforeBlockComment: yes
        //     allowObjectStart: yes
        //   ]
        // ,
        code: `->
  return {
    ###*
    * hi
    ###
    test: ->
  }`,
        options: [
          {
            beforeLineComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        code: `{
  # line at object start
  g: a
} = {}`,
        options: [
          {
            beforeLineComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        code: `{

  # line at object start
  g
} = {}`,
        options: [
          {
            beforeLineComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        code: `{
  ### block comment at object-like start###
  g: a
} = {}`,
        options: [
          {
            beforeBlockComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        code: `{
  ### block comment at object-like start###
  g
} = {}`,
        options: [
          {
            beforeBlockComment: true,
            allowObjectStart: true
          }
        ]
      },
      {
        // check for object end comments
        code: `obj = {
  g: 1
  # line at object end
}`,
        options: [
          {
            afterLineComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        // ,
        //   code: '''
        //     obj =
        //       g: 1
        //       # line at object end
        //   '''
        //   options: [
        //     afterLineComment: yes
        //     allowObjectEnd: yes
        //   ]
        code: `->
  return {
    test: ->
    # hi
  }`,
        options: [
          {
            afterLineComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        code: `obj = {
  g: 1
  
  ### block comment at object end###
}`,
        options: [
          {
            afterBlockComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        code: `->
  return {
    test: ->

    ###*
    * hi
    ###
  }`,
        options: [
          {
            afterBlockComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        code: `{
  g: a
  # line at object end
} = {}`,
        options: [
          {
            afterLineComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        code: `{
  g
  # line at object end
} = {}`,
        options: [
          {
            afterLineComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        code: `{
  g: a
  
  ### block comment at object-like end###
} = {}`,
        options: [
          {
            afterBlockComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        code: `{
  g
  
  ### block comment at object-like end###
} = {}`,
        options: [
          {
            afterBlockComment: true,
            allowObjectEnd: true
          }
        ]
      },
      {
        // check for array start comments
        code: `arr = [
  # line at array start
  1]`,
        options: [
          {
            beforeLineComment: true,
            allowArrayStart: true
          }
        ]
      },
      {
        code: `arr = [
  ### block comment at array start###
  1
]`,
        options: [
          {
            beforeBlockComment: true,
            allowArrayStart: true
          }
        ]
      },
      {
        code: `[
  # line at array start
  a
] = []`,
        options: [
          {
            beforeLineComment: true,
            allowArrayStart: true
          }
        ]
      },
      {
        code: `[
  ### block comment at array start###
  a
] = []`,
        options: [
          {
            beforeBlockComment: true,
            allowArrayStart: true
          }
        ]
      },
      {
        // check for array end comments
        code: `arr = [
  1
  # line at array end
]`,
        options: [
          {
            afterLineComment: true,
            allowArrayEnd: true
          }
        ]
      },
      {
        code: `arr = [
  1
  
  ### block comment at array end###
]`,
        options: [
          {
            afterBlockComment: true,
            allowArrayEnd: true
          }
        ]
      },
      {
        code: `[
  a
  # line at array end
] = []`,
        options: [
          {
            afterLineComment: true,
            allowArrayEnd: true
          }
        ]
      },
      {
        code: `[
  a
  
  ### block comment at array end###
] = []`,
        options: [
          {
            afterBlockComment: true,
            allowArrayEnd: true
          }
        ]
      },
      {
        // ignorePattern
        code: `foo

### eslint-disable no-underscore-dangle ###

this._values = values
this._values2 = true
### eslint-enable no-underscore-dangle ###
bar`,
        options: [
          {
            beforeBlockComment: true,
            afterBlockComment: true
          }
        ]
      },
      'foo\n### eslint ###',
      'foo\n### jshint ###',
      'foo\n### jslint ###',
      'foo\n### istanbul ###',
      'foo\n### global ###',
      'foo\n### globals ###',
      'foo\n### exported ###',
      'foo\n### jscs ###',
      {
        code: 'foo\n### this is pragmatic ###',
        options: [
          {
            ignorePattern: 'pragma'
          }
        ]
      },
      {
        code: 'foo\n### this is pragmatic ###',
        options: [
          {
            applyDefaultIgnorePatterns: false,
            ignorePattern: 'pragma'
          }
        ]
      }
    ],
    invalid: [
      {
        // default rules
        code: 'bar()\n###* block block block\n * block \n ###\na = 1',
        output: 'bar()\n\n###* block block block\n * block \n ###\na = 1',
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        // line comments
        code: 'baz()\n# A line comment with no empty line after\na = 1',
        output: 'baz()\n# A line comment with no empty line after\n\na = 1',
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line'
          }
        ]
      },
      {
        code: 'baz()\n# A line comment with no empty line after\na = 1',
        output: 'baz()\n\n# A line comment with no empty line after\na = 1',
        options: [
          {
            beforeLineComment: true,
            afterLineComment: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line'
          }
        ]
      },
      {
        code: '# A line comment with no empty line after\na = 1',
        output: '# A line comment with no empty line after\n\na = 1',
        options: [
          {
            beforeLineComment: true,
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'baz()\n# A line comment with no empty line after\na = 1',
        output: 'baz()\n\n# A line comment with no empty line after\n\na = 1',
        options: [
          {
            beforeLineComment: true,
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          },
          {
            message: afterMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        // block comments
        code: 'bar()\n###*\n * block block block\n ###\na = 1',
        output: 'bar()\n\n###*\n * block block block\n ###\n\na = 1',
        options: [
          {
            afterBlockComment: true,
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          },
          {
            message: afterMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: 'bar()\n### first block comment ### ### second block comment ###\na = 1',
        output: 'bar()\n\n### first block comment ### ### second block comment ###\n\na = 1',
        options: [
          {
            afterBlockComment: true,
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          },
          {
            message: afterMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: 'bar()\n### first block comment ### ### second block\n comment ###\na = 1',
        output: 'bar()\n\n### first block comment ### ### second block\n comment ###\n\na = 1',
        options: [
          {
            afterBlockComment: true,
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          },
          {
            message: afterMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: 'bar()\n###*\n * block block block\n ###\na = 1',
        output: 'bar()\n###*\n * block block block\n ###\n\na = 1',
        options: [
          {
            afterBlockComment: true,
            beforeBlockComment: false
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: 'bar()\n###*\n * block block block\n ###\na = 1',
        output: 'bar()\n\n###*\n * block block block\n ###\na = 1',
        options: [
          {
            afterBlockComment: false,
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: `->
  a = 1
  # line at block start
  g = 1`,
        output: `->
  a = 1

  # line at block start
  g = 1`,
        options: [
          {
            beforeLineComment: true,
            allowBlockStart: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `->
  a = 1
  
  # line at block start
  g = 1`,
        output: `->
  a = 1
  
  # line at block start

  g = 1`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 4
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    # line at switch case start
    break`,
        output: `switch ('foo')
  when 'foo'

    # line at switch case start
    break`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break
    
  else
    # line at switch case start
    break`,
        output: `switch ('foo')
  when 'foo'
    break
    
  else

    # line at switch case start
    break`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 6
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        output: `try
  # line at block start and end

catch`,
        options: [
          {
            afterLineComment: true,
            allowBlockStart: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `try
  # line at block start and end
catch`,
        output: `try

  # line at block start and end
catch`,
        options: [
          {
            beforeLineComment: true,
            allowBlockEnd: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `class A
  # line at class start
  constructor: ->`,
        output: `class A

  # line at class start
  constructor: ->`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `class A
  # line at class start
  constructor: ->`,
        output: `class A

  # line at class start
  constructor: ->`,
        options: [
          {
            allowBlockStart: true,
            allowClassStart: false,
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `class B
  constructor: ->

  # line at class end
d`,
        output: `class B
  constructor: ->

  # line at class end

d`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 4
          }
        ]
      },
      {
        code: `class B
  constructor: ->

  # line at class end
d`,
        output: `class B
  constructor: ->

  # line at class end

d`,
        options: [
          {
            afterLineComment: true,
            allowBlockEnd: true,
            allowClassEnd: false
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 4
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    g = 1

    # line at switch case end
d`,
        output: `switch ('foo')
  when 'foo'
    g = 1

    # line at switch case end

d`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 5
          }
        ]
      },
      {
        code: `switch ('foo')
  when 'foo'
    break

  else
    g = 1

    # line at switch case end
d`,
        output: `switch ('foo')
  when 'foo'
    break

  else
    g = 1

    # line at switch case end

d`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 8
          }
        ]
      },
      {
        // object start comments
        code: `obj = {
  # line at object start
  g: 1
}`,
        output: `obj = {

  # line at object start
  g: 1
}`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `obj =
  # line at object start
  g: 1`,
        output: `obj =

  # line at object start
  g: 1`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `->
  return {
    # hi
    test: ->
  }`,
        output: `->
  return {

    # hi
    test: ->
  }`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `obj = {
  ### block comment at object start###
  g: 1
}`,
        output: `obj = {

  ### block comment at object start###
  g: 1
}`,
        options: [
          {
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: `->
  return
    ###*
    * hi
    ###
    test: ->`,
        output: `->
  return

    ###*
    * hi
    ###
    test: ->`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 3
          }
        ]
      },
      {
        code: `{
  # line at object start
  g: a
} = {}`,
        output: `{

  # line at object start
  g: a
} = {}`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `{
  # line at object start
  g
} = {}`,
        output: `{

  # line at object start
  g
} = {}`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `{
  ### block comment at object-like start###
  g: a
} = {}`,
        output: `{

  ### block comment at object-like start###
  g: a
} = {}`,
        options: [
          {
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: `{
  ### block comment at object-like start###
  g
} = {}`,
        output: `{

  ### block comment at object-like start###
  g
} = {}`,
        options: [
          {
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        // object end comments
        code: `obj = {
  g: 1
  # line at object end
}`,
        output: `obj = {
  g: 1
  # line at object end

}`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `obj =
  g: 1
  # line at object end
d`,
        output: `obj =
  g: 1
  # line at object end

d`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `->
  return {
    test: ->
    # hi
  }`,
        output: `->
  return {
    test: ->
    # hi

  }`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 4
          }
        ]
      },
      {
        code: `obj = {
  g: 1
  
  ### block comment at object end###
}`,
        output: `obj = {
  g: 1
  
  ### block comment at object end###

}`,
        options: [
          {
            afterBlockComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 4
          }
        ]
      },
      {
        code: `->
  return {
    test: ->

    ###*
    * hi
    ###
  }`,
        output: `->
  return {
    test: ->

    ###*
    * hi
    ###

  }`,
        options: [
          {
            afterBlockComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 5
          }
        ]
      },
      {
        code: `{
  g: a
  # line at object end
} = {}`,
        output: `{
  g: a
  # line at object end

} = {}`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `{
  g
  # line at object end
} = {}`,
        output: `{
  g
  # line at object end

} = {}`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `{
  g: a
  
  ### block comment at object-like end###
} = {}`,
        output: `{
  g: a
  
  ### block comment at object-like end###

} = {}`,
        options: [
          {
            afterBlockComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 4
          }
        ]
      },
      {
        code: `{
  g
  
  ### block comment at object-like end###
} = {}`,
        output: `{
  g
  
  ### block comment at object-like end###

} = {}`,
        options: [
          {
            afterBlockComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 4
          }
        ]
      },
      {
        // array start comments
        code: `arr = [
  # line at array start
  1
]`,
        output: `arr = [

  # line at array start
  1
]`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `arr = [
  ### block comment at array start###
  1
]`,
        output: `arr = [

  ### block comment at array start###
  1
]`,
        options: [
          {
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        code: `[
  # line at array start
  a
] = []`,
        output: `[

  # line at array start
  a
] = []`,
        options: [
          {
            beforeLineComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Line',
            line: 2
          }
        ]
      },
      {
        code: `[
  ### block comment at array start###
  a
] = []`,
        output: `[

  ### block comment at array start###
  a
] = []`,
        options: [
          {
            beforeBlockComment: true
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 2
          }
        ]
      },
      {
        // array end comments
        code: `arr = [
  1
  # line at array end
]`,
        output: `arr = [
  1
  # line at array end

]`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `arr = [
  1
  
  ### block comment at array end###
]`,
        output: `arr = [
  1
  
  ### block comment at array end###

]`,
        options: [
          {
            afterBlockComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 4
          }
        ]
      },
      {
        code: `[
  a
  # line at array end
] = []`,
        output: `[
  a
  # line at array end

] = []`,
        options: [
          {
            afterLineComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Line',
            line: 3
          }
        ]
      },
      {
        code: `[
  a

  ### block comment at array end###
] = []`,
        output: `[
  a

  ### block comment at array end###

] = []`,
        options: [
          {
            afterBlockComment: true
          }
        ],
        errors: [
          {
            message: afterMessage,
            type: 'Block',
            line: 4
          }
        ]
      },
      {
        // ignorePattern
        code: `foo

### eslint-disable no-underscore-dangle ###

this._values = values
this._values2 = true
### eslint-enable no-underscore-dangle ###
bar`,
        output: `foo

### eslint-disable no-underscore-dangle ###

this._values = values
this._values2 = true

### eslint-enable no-underscore-dangle ###

bar`,
        options: [
          {
            beforeBlockComment: true,
            afterBlockComment: true,
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block',
            line: 7
          },
          {
            message: afterMessage,
            type: 'Block',
            line: 7
          }
        ]
      },
      {
        code: 'foo\n### eslint ###',
        output: 'foo\n\n### eslint ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### jshint ###',
        output: 'foo\n\n### jshint ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### jslint ###',
        output: 'foo\n\n### jslint ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### istanbul ###',
        output: 'foo\n\n### istanbul ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### global ###',
        output: 'foo\n\n### global ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### globals ###',
        output: 'foo\n\n### globals ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### exported ###',
        output: 'foo\n\n### exported ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### jscs ###',
        output: 'foo\n\n### jscs ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### something else ###',
        output: 'foo\n\n### something else ###',
        options: [
          {
            ignorePattern: 'pragma'
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        code: 'foo\n### eslint ###',
        output: 'foo\n\n### eslint ###',
        options: [
          {
            applyDefaultIgnorePatterns: false
          }
        ],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      },
      {
        // "fallthrough" patterns are not ignored by default
        code: 'foo\n### fallthrough ###',
        output: 'foo\n\n### fallthrough ###',
        options: [],
        errors: [
          {
            message: beforeMessage,
            type: 'Block'
          }
        ]
      }
    ]
  });

}).call(this);
