// Generated by CoffeeScript 2.5.0
(function() {
  /* eslint-env jest */
  var RuleTester, ariaValidityTests, dom, domElements, errorMessage, invalidAriaValidityTests, invalidRoleValidityTests, parserOptionsMapper, path, roleValidityTests, rule, ruleTester;

  /**
   * @fileoverview Enforce that elements that do not support ARIA roles,
   *  states and properties do not have those attributes.
   * @author Ethan Cohen
   */
  // -----------------------------------------------------------------------------
  // Requirements
  // -----------------------------------------------------------------------------
  path = require('path');

  ({dom} = require('aria-query'));

  ({RuleTester} = require('eslint'));

  ({
    default: parserOptionsMapper
  } = require('../eslint-plugin-jsx-a11y-parser-options-mapper'));

  rule = require('eslint-plugin-jsx-a11y/lib/rules/aria-unsupported-elements');

  // -----------------------------------------------------------------------------
  // Tests
  // -----------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  errorMessage = function(invalidProp) {
    return {
      message: `This element does not support ARIA roles, states and properties. Try removing the prop '${invalidProp}'.`,
      type: 'JSXOpeningElement'
    };
  };

  domElements = [...dom.keys()];

  // Generate valid test cases
  roleValidityTests = domElements.map(function(element) {
    var isReserved, role;
    isReserved = dom.get(element).reserved || false;
    role = isReserved ? '' : 'role';
    return {
      code: `<${element} ${role} />`
    };
  });

  ariaValidityTests = domElements.map(function(element) {
    var aria, isReserved;
    isReserved = dom.get(element).reserved || false;
    aria = isReserved ? '' : 'aria-hidden';
    return {
      code: `<${element} ${aria} />`
    };
  }).concat({
    code: '<fake aria-hidden />',
    errors: [errorMessage('aria-hidden')]
  });

  // Generate invalid test cases.
  invalidRoleValidityTests = domElements.filter(function(element) {
    return Boolean(dom.get(element).reserved);
  }).map(function(reservedElem) {
    return {
      code: `<${reservedElem} role {...props} />`,
      errors: [errorMessage('role')]
    };
  });

  invalidAriaValidityTests = domElements.filter(function(element) {
    return Boolean(dom.get(element).reserved);
  }).map(function(reservedElem) {
    return {
      code: `<${reservedElem} aria-hidden aria-role=\"none\" {...props} />`,
      errors: [errorMessage('aria-hidden')]
    };
  });

  ruleTester.run('aria-unsupported-elements', rule, {
    valid: roleValidityTests.concat(ariaValidityTests).map(parserOptionsMapper),
    invalid: invalidRoleValidityTests.concat(invalidAriaValidityTests).map(parserOptionsMapper)
  });

}).call(this);
