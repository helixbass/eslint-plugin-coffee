// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Prevent using unwrapped literals in a React component definition
   * @author Caleb morris
   * @author David Buchan-Swanson
   */
  'use strict';
  var RuleTester, path, rule, ruleTester;

  // ------------------------------------------------------------------------------
  // Requirements
  // ------------------------------------------------------------------------------
  rule = require('eslint-plugin-react/lib/rules/jsx-no-literals');

  ({RuleTester} = require('eslint'));

  path = require('path');

  // ------------------------------------------------------------------------------
  // Tests
  // ------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  /* eslint-disable coffee/no-template-curly-in-string */
  ruleTester.run('jsx-no-literals', rule, {
    valid: [
      {
        code: `class Comp1 extends Component
  render: ->
    return (
      <div>
        {'asdjfl'}
      </div>
    )`
      },
      {
        // parser: 'babel-eslint'
        code: `class Comp1 extends Component
  render: ->
    return (
      <>
        {'asdjfl'}
      </>
    )`
      },
      {
        // parser: 'babel-eslint'
        code: `class Comp1 extends Component
  render: ->
    (<div>{'test'}</div>)`
      },
      {
        // parser: 'babel-eslint'
        code: `class Comp1 extends Component
  render: ->
    bar = (<div>{'hello'}</div>)
    return bar`
      },
      {
        // parser: 'babel-eslint'
        code: `Hello = createReactClass({
  foo: (<div>{'hello'}</div>),
  render: ->
    return this.foo
})`
      },
      {
        // parser: 'babel-eslint'
        code: `class Comp1 extends Component
  render: ->
    return (
      <div>
        {'asdjfl'}
        {'test'}
        {'foo'}
      </div>
    )`
      },
      {
        // parser: 'babel-eslint'
        code: `class Comp1 extends Component
  render: ->
    return (
      <div>
      </div>
    )`
      },
      {
        // parser: 'babel-eslint'
        code: `foo = require('foo')`
      },
      {
        // parser: 'babel-eslint'
        code: `<Foo bar='test'>
  {'blarg'}
</Foo>`
      },
      {
        // parser: 'babel-eslint'
        code: `<Foo bar="test">
  {intl.formatText(message)}
</Foo>`,
        // parser: 'babel-eslint'
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ]
      },
      {
        code: `<Foo bar="test">
  {translate('my.translate.key')}
</Foo>`,
        // parser: 'babel-eslint'
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ]
      },
      {
        code: `<Foo bar="test">
  {intl.formatText(message)}
</Foo>`,
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ]
      },
      {
        code: `<Foo bar="test">
  {translate('my.translate.key')}
</Foo>`,
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ]
      },
      {
        code: '<Foo bar={true} />',
        options: [
          {
            noStrings: true
          }
        ]
      },
      {
        code: '<Foo bar={false} />',
        options: [
          {
            noStrings: true
          }
        ]
      },
      {
        code: '<Foo bar={100} />',
        options: [
          {
            noStrings: true
          }
        ]
      },
      {
        code: '<Foo bar={null} />',
        options: [
          {
            noStrings: true
          }
        ]
      },
      {
        code: '<Foo bar={{}} />',
        options: [
          {
            noStrings: true
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  asdf: ->
  render: ->
    return <Foo bar={this.asdf} />`,
        options: [
          {
            noStrings: true
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    foo = "bar"
    return <div />`,
        options: [
          {
            noStrings: true
          }
        ]
      }
    ],
    invalid: [
      {
        code: `class Comp1 extends Component
  render: ->
    return (<div>test</div>)`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "test"'
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    return (<>test</>)`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "test"'
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    foo = (<div>test</div>)
    return foo`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "test"'
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    varObjectTest = { testKey : (<div>test</div>) }
    return varObjectTest.testKey`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "test"'
          }
        ]
      },
      {
        code: `Hello = createReactClass({
  foo: (<div>hello</div>),
  render: ->
    return this.foo
})`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "hello"'
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    return (
      <div>
        asdjfl
      </div>
    )`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "asdjfl"'
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    return (
      <div>
        asdjfl
        test
        foo
      </div>
    )`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "asdjfl\n        test\n        foo"'
          }
        ]
      },
      {
        code: `class Comp1 extends Component
  render: ->
    return (
      <div>
        {'asdjfl'}
        test
        {'foo'}
      </div>
    )`,
        // parser: 'babel-eslint'
        errors: [
          {
            message: 'Missing JSX expression container around literal string: "test"'
          }
        ]
      },
      {
        code: `<Foo bar="test">
  {'Test'}
</Foo>`,
        // parser: 'babel-eslint'
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: "\'Test\'"'
          }
        ]
      },
      {
        code: `<Foo bar="test">
  {'Test'}
</Foo>`,
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: "\'Test\'"'
          }
        ]
      },
      {
        code: `<Foo bar="test">
  {'Test' + name}
</Foo>`,
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: "\'Test\'"'
          }
        ]
      },
      {
        code: `<Foo bar="test">
  Test
</Foo>`,
        // parser: 'babel-eslint'
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: "Test"'
          }
        ]
      },
      {
        code: `<Foo bar="test">
  Test
</Foo>`,
        options: [
          {
            noStrings: true,
            ignoreProps: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: "Test"'
          }
        ]
      },
      {
        code: `<Foo>
  {"Test"}
</Foo>`,
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: ""Test""'
          }
        ]
      },
      {
        code: '<Foo bar={"Test"} />',
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: ""Test""'
          }
        ]
      },
      {
        code: '<Foo bar={"#{baz}"} />',
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: ""#{baz}""'
          }
        ]
      },
      {
        code: '<Foo bar={"Test #{baz}"} />',
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: ""Test #{baz}""'
          }
        ]
      },
      {
        code: '<Foo bar={"foo" + \'bar\'} />',
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: ""foo""'
          },
          {
            message: 'Strings not allowed in JSX files: "\'bar\'"'
          }
        ]
      },
      {
        code: '<Foo bar={"foo" + "bar"} />',
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: ""foo""'
          },
          {
            message: 'Strings not allowed in JSX files: ""bar""'
          }
        ]
      },
      {
        code: '<Foo bar={\'foo\' + "bar"} />',
        options: [
          {
            noStrings: true
          }
        ],
        errors: [
          {
            message: 'Strings not allowed in JSX files: "\'foo\'"'
          },
          {
            message: 'Strings not allowed in JSX files: ""bar""'
          }
        ]
      }
    ]
  });

}).call(this);
