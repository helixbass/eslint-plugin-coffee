// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Tests for no-bitwise rule.
   * @author Nicholas C. Zakas
   */
  'use strict';
  var RuleTester, path, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-bitwise');

  ({RuleTester} = require('eslint'));

  path = require('path');

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  ruleTester.run('no-bitwise', rule, {
    valid: [
      'a + b',
      '!a',
      'a += b',
      {
        code: '~[1, 2, 3].indexOf(1)',
        options: [
          {
            allow: ['~']
          }
        ]
      },
      {
        code: '~1<<2 is -8',
        options: [
          {
            allow: ['~',
          '<<']
          }
        ]
      },
      {
        code: '~1<<2 == -8',
        options: [
          {
            allow: ['~',
          '<<']
          }
        ]
      },
      {
        code: 'a|0',
        options: [
          {
            int32Hint: true
          }
        ]
      },
      {
        code: 'a|0',
        options: [
          {
            allow: ['|'],
            int32Hint: false
          }
        ]
      }
    ],
    invalid: [
      {
        code: 'a ^ b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '^'
            },
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: 'a | b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '|'
            },
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: 'a & b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '&'
            },
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: 'a << b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '<<'
            },
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: 'a >> b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '>>'
            },
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: 'a >>> b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '>>>'
            },
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: '~a',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '~'
            },
            type: 'UnaryExpression'
          }
        ]
      },
      {
        code: 'a ^= b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '^='
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'a |= b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '|='
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'a &= b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '&='
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'a <<= b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '<<='
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'a >>= b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '>>='
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'a >>>= b',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              operator: '>>>='
            },
            type: 'AssignmentExpression'
          }
        ]
      }
    ]
  });

}).call(this);
