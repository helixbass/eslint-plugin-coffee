// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Tests for no-self-assign rule.
   * @author Toru Nagashima
   */
  'use strict';
  var RuleTester, path, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-self-assign');

  ({RuleTester} = require('eslint'));

  path = require('path');

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  ruleTester.run('no-self-assign', rule, {
    valid: [
      'a = a',
      'a = b',
      'a += a',
      'a = +a',
      'a = [a]',
      '[a] = a',
      '[a = 1] = [a]',
      '[a, b] = [b, a]',
      '[a,, b] = [, b, a]',
      '[x, a] = [...x, a]',
      '[a, b] = {a, b}',
      '({a} = a)',
      '({a = 1} = {a})',
      '({a: b} = {a})',
      '({a} = {a: b})',
      '({a} = {a: ->})',
      '({a} = {[a]: a})',
      '({a, ...b} = {a, ...b})',
      {
        code: 'a.b = a.c',
        options: [
          {
            props: true
          }
        ]
      },
      {
        code: 'a.b = c.b',
        options: [
          {
            props: true
          }
        ]
      },
      {
        code: 'a.b = a[b]',
        options: [
          {
            props: true
          }
        ]
      },
      {
        code: 'a[b] = a.b',
        options: [
          {
            props: true
          }
        ]
      },
      {
        code: 'a.b().c = a.b().c',
        options: [
          {
            props: true
          }
        ]
      },
      {
        code: 'b().c = b().c',
        options: [
          {
            props: true
          }
        ]
      },
      {
        code: 'a[b + 1] = a[b + 1]',
        options: [
          {
            props: true // it ignores non-simple computed properties.
          }
        ]
      },
      {
        code: 'a.b = a.b',
        options: [
          {
            props: false
          }
        ]
      },
      {
        code: 'a.b.c = a.b.c',
        options: [
          {
            props: false
          }
        ]
      },
      {
        code: 'a[b] = a[b]',
        options: [
          {
            props: false
          }
        ]
      },
      {
        code: "a['b'] = a['b']",
        options: [
          {
            props: false
          }
        ]
      }
    ],
    invalid: [
      {
        code: `a = null
a = a`,
        errors: ["'a' is assigned to itself."]
      },
      {
        code: '[a] = [a]',
        errors: ["'a' is assigned to itself."]
      },
      {
        code: '[a, b] = [a, b]',
        errors: ["'a' is assigned to itself.",
      "'b' is assigned to itself."]
      },
      {
        code: '[a, b] = [a, c]',
        errors: ["'a' is assigned to itself."]
      },
      {
        code: '[a, b] = [, b]',
        errors: ["'b' is assigned to itself."]
      },
      {
        code: '[a, ...b] = [a, ...b]',
        errors: ["'a' is assigned to itself.",
      "'b' is assigned to itself."]
      },
      {
        code: '[[a], {b}] = [[a], {b}]',
        errors: ["'a' is assigned to itself.",
      "'b' is assigned to itself."]
      },
      {
        code: '({a} = {a})',
        errors: ["'a' is assigned to itself."]
      },
      {
        code: '({a: b} = {a: b})',
        errors: ["'b' is assigned to itself."]
      },
      {
        code: '({a, b} = {a, b})',
        errors: ["'a' is assigned to itself.",
      "'b' is assigned to itself."]
      },
      {
        code: '({a, b} = {b, a})',
        errors: ["'b' is assigned to itself.",
      "'a' is assigned to itself."]
      },
      {
        code: '({a, b} = {c, a})',
        errors: ["'a' is assigned to itself."]
      },
      {
        code: '({a: {b}, c: [d]} = {a: {b}, c: [d]})',
        errors: ["'b' is assigned to itself.",
      "'d' is assigned to itself."]
      },
      {
        code: '({a, b} = {a, ...x, b})',
        errors: ["'b' is assigned to itself."]
      },
      {
        code: 'a.b = a.b',
        errors: ["'a.b' is assigned to itself."]
      },
      {
        code: 'a.b.c = a.b.c',
        errors: ["'a.b.c' is assigned to itself."]
      },
      {
        code: 'a[b] = a[b]',
        errors: ["'a[b]' is assigned to itself."]
      },
      {
        code: "a['b'] = a['b']",
        errors: ["'a['b']' is assigned to itself."]
      },
      {
        code: 'a.b = a.b',
        options: [
          {
            props: true
          }
        ],
        errors: ["'a.b' is assigned to itself."]
      },
      {
        code: 'a.b.c = a.b.c',
        options: [
          {
            props: true
          }
        ],
        errors: ["'a.b.c' is assigned to itself."]
      },
      {
        code: 'a[b] = a[b]',
        options: [
          {
            props: true
          }
        ],
        errors: ["'a[b]' is assigned to itself."]
      },
      {
        code: "a['b'] = a['b']",
        options: [
          {
            props: true
          }
        ],
        errors: ["'a['b']' is assigned to itself."]
      }
    ]
  });

}).call(this);
