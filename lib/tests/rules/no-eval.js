// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Tests for no-eval rule.
   * @author Nicholas C. Zakas
   */
  'use strict';
  var RuleTester, path, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-eval');

  ({RuleTester} = require('eslint'));

  path = require('path');

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  ruleTester.run('no-eval', rule, {
    valid: [
      'Eval(foo)',
      'Eval foo',
      "setTimeout('foo')",
      "setInterval('foo')",
      "window.setTimeout('foo')",
      "window.setInterval('foo')",
      // User-defined eval methods.
      "window.eval('foo')",
      {
        code: "window.eval('foo')",
        env: {
          node: true
        }
      },
      {
        code: "window.noeval('foo')",
        env: {
          browser: true
        }
      },
      "global.eval('foo')",
      {
        code: "global.eval('foo')",
        env: {
          browser: true
        }
      },
      {
        code: "global.noeval('foo')",
        env: {
          node: true
        }
      },
      "this.noeval('foo')",
      "@noeval 'foo'",
      `foo = ->
  'use strict'
  @eval('foo')`,
      {
        code: `foo = -> this.eval('foo')`
      },
      `obj = {
  foo: -> this.eval('foo')
}`,
      `obj = {}
obj.foo = -> this.eval('foo')`,
      `class A
  foo: -> this.eval()`,
      `class A
  @foo: -> this.eval()`,
      {
        // Allows indirect eval
        code: "(0; eval)('foo')",
        options: [
          {
            allowIndirect: true
          }
        ]
      },
      {
        code: "(0; window.eval)('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "(0; window['eval'])('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: `EVAL = eval
EVAL('foo')`,
        options: [
          {
            allowIndirect: true
          }
        ]
      },
      {
        code: `EVAL = @eval
EVAL('foo')`,
        options: [
          {
            allowIndirect: true
          }
        ]
      },
      {
        code: `((exe) -> exe('foo'))(eval)`,
        options: [
          {
            allowIndirect: true
          }
        ]
      },
      {
        code: `do (exe = eval) -> exe('foo')`,
        options: [
          {
            allowIndirect: true
          }
        ]
      },
      {
        code: "window.eval('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "window.window.eval('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "window.window['eval']('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "global.eval('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          node: true
        }
      },
      {
        code: "global.global.eval('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        env: {
          node: true
        }
      },
      {
        code: "this.eval('foo')",
        options: [
          {
            allowIndirect: true
          }
        ]
      },
      {
        code: `foo = -> this.eval('foo')`,
        options: [
          {
            allowIndirect: true
          }
        ]
      }
    ],
    invalid: [
      {
        // Direct eval
        code: 'eval(foo)',
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ]
      },
      {
        code: "eval('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ]
      },
      {
        code: 'eval(foo)',
        options: [
          {
            allowIndirect: true
          }
        ],
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ]
      },
      {
        code: "eval('foo')",
        options: [
          {
            allowIndirect: true
          }
        ],
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ]
      },
      {
        // Indirect eval
        code: "(0; eval)('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'Identifier'
          }
        ]
      },
      {
        code: "(0; window.eval)('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'MemberExpression'
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "(0; window['eval'])('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'MemberExpression'
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: `EVAL = eval
EVAL 'foo'`,
        errors: [
          {
            messageId: 'unexpected',
            type: 'Identifier'
          }
        ]
      },
      {
        // ,
        //   code: """
        //     EVAL = @eval
        //     EVAL('foo')
        //   """
        //   errors: [messageId: 'unexpected', type: 'MemberExpression']
        code: `((exe) -> exe('foo'))(eval)`,
        errors: [
          {
            messageId: 'unexpected',
            type: 'Identifier'
          }
        ]
      },
      {
        code: `do (exe = eval) -> exe('foo')`,
        errors: [
          {
            messageId: 'unexpected',
            type: 'Identifier'
          }
        ]
      },
      {
        code: "window.eval('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "window.window.eval('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "window.window['eval']('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ],
        env: {
          browser: true
        }
      },
      {
        code: "global.eval('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ],
        env: {
          node: true
        }
      },
      {
        code: "global.global.eval('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ],
        env: {
          node: true
        }
      },
      {
        code: "global.global['eval']('foo')",
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ],
        env: {
          node: true
        }
      }
    ]
  });

  // ,
//   code: "this.eval('foo')"
//   errors: [messageId: 'unexpected', type: 'CallExpression']
// ,
//   code: "foo = -> this.eval('foo')"
//   errors: [messageId: 'unexpected', type: 'CallExpression']

}).call(this);
