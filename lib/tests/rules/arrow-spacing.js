// Generated by CoffeeScript 2.5.0
(function() {
  /**
   * @fileoverview Tests for arrow-spacing
   * @author Jxck
   */
  'use strict';
  var RuleTester, invalid, path, rule, ruleTester, valid;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------

  rule = require('../../rules/arrow-spacing');

  ({RuleTester} = require('eslint'));

  path = require('path');

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: path.join(__dirname, '../../..')
  });

  valid = [
    {
      code: '(a) => a',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: '(a) -> a',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: '() => {}',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: '=> {}',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: 'f ->',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: 'f(->)',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: 'f(->, b)',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: `f ->
.b`,
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: '(a) => {}',
      options: [
        {
          after: true,
          before: true
        }
      ]
    },
    {
      code: '(a)=> a',
      options: [
        {
          after: true,
          before: false
        }
      ]
    },
    {
      code: '()=> {}',
      options: [
        {
          after: true,
          before: false
        }
      ]
    },
    {
      code: '(a)=> {}',
      options: [
        {
          after: true,
          before: false
        }
      ]
    },
    {
      code: '(a) =>a',
      options: [
        {
          after: false,
          before: true
        }
      ]
    },
    {
      code: '() =>{}',
      options: [
        {
          after: false,
          before: true
        }
      ]
    },
    {
      code: '(a) =>{}',
      options: [
        {
          after: false,
          before: true
        }
      ]
    },
    {
      code: '(a)=>a',
      options: [
        {
          after: false,
          before: false
        }
      ]
    },
    {
      code: '()=>{}',
      options: [
        {
          after: false,
          before: false
        }
      ]
    },
    {
      code: '(a)=>{}',
      options: [
        {
          after: false,
          before: false
        }
      ]
    },
    {
      code: '(a) => a',
      options: [{}]
    },
    {
      code: '() => {}',
      options: [{}]
    },
    {
      code: '(a) => {}',
      options: [{}]
    },
    '(a) =>\n  {}',
    '(a) =>\r\n  {}',
    '(a) =>\n    0',
    {
      code: '(a)  =>\n  {}',
      options: [
        {
          after: false
        }
      ]
    },
    '-> -> b',
    '=> => b'
  ];

  invalid = [
    {
      code: '(a)=>a',
      output: '(a) => a',
      options: [
        {
          after: true,
          before: true
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 6,
          line: 1,
          type: 'Identifier',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a)->a',
      output: '(a) -> a',
      options: [
        {
          after: true,
          before: true
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 6,
          line: 1,
          type: 'Identifier',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '()=>{}',
      output: '() => {}',
      options: [
        {
          after: true,
          before: true
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 5,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: 'f(=>{})',
      output: 'f(=> {})',
      options: [
        {
          after: true,
          before: true
        }
      ],
      errors: [
        {
          column: 5,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a)=>{}',
      output: '(a) => {}',
      options: [
        {
          after: true,
          before: true
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 6,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a)=> a',
      output: '(a) =>a',
      options: [
        {
          after: false,
          before: true
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Identifier',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '()=> {}',
      output: '() =>{}',
      options: [
        {
          after: false,
          before: true
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 6,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '(a)=> {}',
      output: '(a) =>{}',
      options: [
        {
          after: false,
          before: true
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '()=>  {}',
      output: '() =>{}',
      options: [
        {
          after: false,
          before: true
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '(a)=>  {}',
      output: '(a) =>{}',
      options: [
        {
          after: false,
          before: true
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedBefore'
        },
        {
          column: 8,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '(a) =>a',
      output: '(a)=> a',
      options: [
        {
          after: true,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Identifier',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '() =>{}',
      output: '()=> {}',
      options: [
        {
          after: true,
          before: false
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 6,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a) =>{}',
      output: '(a)=> {}',
      options: [
        {
          after: true,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a)  =>a',
      output: '(a)=> a',
      options: [
        {
          after: true,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 8,
          line: 1,
          type: 'Identifier',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '()  =>{}',
      output: '()=> {}',
      options: [
        {
          after: true,
          before: false
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a)  =>{}',
      output: '(a)=> {}',
      options: [
        {
          after: true,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 8,
          line: 1,
          type: 'Punctuator',
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a) => a',
      output: '(a)=>a',
      options: [
        {
          after: false,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 8,
          line: 1,
          type: 'Identifier',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '() => {}',
      output: '()=>{}',
      options: [
        {
          after: false,
          before: false
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 7,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '(a) => {}',
      output: '(a)=>{}',
      options: [
        {
          after: false,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 8,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '(a)  =>  a',
      output: '(a)=>a',
      options: [
        {
          after: false,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 10,
          line: 1,
          type: 'Identifier',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '()  =>  {}',
      output: '()=>{}',
      options: [
        {
          after: false,
          before: false
        }
      ],
      errors: [
        {
          column: 2,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 9,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      code: '(a)  =>  {}',
      output: '(a)=>{}',
      options: [
        {
          after: false,
          before: false
        }
      ],
      errors: [
        {
          column: 3,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedBefore'
        },
        {
          column: 10,
          line: 1,
          type: 'Punctuator',
          messageId: 'unexpectedAfter'
        }
      ]
    },
    {
      // https://github.com/eslint/eslint/issues/7079
      code: '(a = ()=>0)=>1',
      output: '(a = () => 0) => 1',
      errors: [
        {
          column: 7,
          line: 1,
          messageId: 'expectedBefore'
        },
        {
          column: 10,
          line: 1,
          messageId: 'expectedAfter'
        },
        {
          column: 11,
          line: 1,
          messageId: 'expectedBefore'
        },
        {
          column: 14,
          line: 1,
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '(a = ()=>0)=>(1)',
      output: '(a = () => 0) => (1)',
      errors: [
        {
          column: 7,
          line: 1,
          messageId: 'expectedBefore'
        },
        {
          column: 10,
          line: 1,
          messageId: 'expectedAfter'
        },
        {
          column: 11,
          line: 1,
          messageId: 'expectedBefore'
        },
        {
          column: 14,
          line: 1,
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '->->1',
      output: '-> -> 1',
      errors: [
        {
          column: 3,
          line: 1,
          messageId: 'expectedAfter'
        },
        {
          column: 5,
          line: 1,
          messageId: 'expectedAfter'
        }
      ]
    },
    {
      code: '=>=>1',
      output: '=> => 1',
      errors: [
        {
          column: 3,
          line: 1,
          messageId: 'expectedAfter'
        },
        {
          column: 5,
          line: 1,
          messageId: 'expectedAfter'
        }
      ]
    }
  ];

  ruleTester.run('arrow-spacing', rule, {valid, invalid});

}).call(this);
