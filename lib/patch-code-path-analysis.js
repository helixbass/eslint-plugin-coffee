// Generated by CoffeeScript 2.5.0
(function() {
  var CodePathAnalyzer, PROGRAM_NODE_KEY, monkeypatchMethod;

  CodePathAnalyzer = require('./code-path-analysis/code-path-analyzer');

  PROGRAM_NODE_KEY = '__coffee__';

  monkeypatchMethod = function(ESLintCodePathAnalyzer, isCurrentFileCoffeescript, key) {
    var dynamicallyDelegatingMonkeypatch, original;
    original = ESLintCodePathAnalyzer.prototype[key];
    dynamicallyDelegatingMonkeypatch = function(...args) {
      if (isCurrentFileCoffeescript.current) {
        // eslint-disable-next-line coffee/no-invalid-this
        return CodePathAnalyzer.prototype[key].apply(this, args);
      } else {
        // eslint-disable-next-line coffee/no-invalid-this
        return original.apply(this, args);
      }
    };
    if (key === 'enterNode') {
      return ESLintCodePathAnalyzer.prototype[key] = function(...args) {
        var node;
        [node] = args;
        if ((node != null ? node.type : void 0) === 'Program') {
          isCurrentFileCoffeescript.current = !!node[PROGRAM_NODE_KEY];
        }
        return dynamicallyDelegatingMonkeypatch.apply(this, args);
      };
    } else {
      return ESLintCodePathAnalyzer.prototype[key] = dynamicallyDelegatingMonkeypatch;
    }
  };

  module.exports = {
    patchCodePathAnalysis: function() {
      var ESLintCodePathAnalyzer, i, isCurrentFileCoffeescript, key, len, ref;
      try {
        ESLintCodePathAnalyzer = require('eslint/lib/code-path-analysis/code-path-analyzer');
      } catch (error) {
        try {
          ESLintCodePathAnalyzer = require('eslint/lib/linter/code-path-analysis/code-path-analyzer');
        } catch (error) {
          throw new ReferenceError("Couldn't resolve eslint CodePathAnalyzer");
        }
      }
      if (ESLintCodePathAnalyzer.__monkeypatched) {
        return;
      }
      // ESLintCodePathAnalyzer:: = CodePathAnalyzer::
      isCurrentFileCoffeescript = {
        current: false
      };
      ref = ['enterNode', 'leaveNode', 'onLooped'];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        monkeypatchMethod(ESLintCodePathAnalyzer, isCurrentFileCoffeescript, key);
      }
      return ESLintCodePathAnalyzer.__monkeypatched = true;
    },
    PATCH_CODE_PATH_ANALYSIS_PROGRAM_NODE_KEY: PROGRAM_NODE_KEY
  };

}).call(this);
