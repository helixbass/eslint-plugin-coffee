// Generated by CoffeeScript 2.5.0
(function() {
  var airbnbBaseConfig, airbnbBaseOverridesConfig, airbnbConfig, airbnbOverridesConfig, configureAs, configureAsError, dontApply, filter, flatten, flow, fromPairs, getAirbnbRules, importConfig, keys, map, mapValues, mapWithKey, merge, mergeAll, omitBy, parseForESLint, pickBy, prettierConfig, reject, rules, turnOff, turnOn, usable, yet;

  ({merge} = require('lodash'));

  ({flow, map, flatten, fromPairs, keys, mapValues, pickBy, reject, filter, omitBy, mergeAll} = require('lodash/fp'));

  mapWithKey = map.convert({
    cap: false
  });

  ({parseForESLint} = require('./parser'));

  usable = [
    'no-console',
    'no-control-regex',
    'no-debugger',
    'no-dupe-keys',
    'no-duplicate-case',
    'no-empty',
    'no-ex-assign',
    'no-invalid-regexp',
    'no-irregular-whitespace',
    'no-obj-calls',
    'no-prototype-builtins',
    'no-sparse-arrays',
    'no-unsafe-finally',
    'accessor-pairs', // wouldn't work for backticked get/set
    'default-case',
    'max-classes-per-file',
    'no-alert',
    'no-caller',
    'no-eval',
    'no-extend-native',
    'no-global-assign', // only ++ applies since we generate declarations on other write references
    'no-implied-eval',
    'no-iterator',
    'no-new-func',
    'no-new-wrappers',
    'no-param-reassign',
    'no-proto',
    'no-restricted-properties',
    'no-script-url',
    'no-throw-literal',
    'no-useless-call',
    'no-useless-concat',
    'no-warning-comments',
    'prefer-promise-reject-errors',
    'radix',
    'no-delete-var',
    'no-restricted-globals',
    'global-require',
    'handle-callback-err',
    'no-buffer-constructor',
    'no-new-require',
    'no-path-concat',
    'no-process-env',
    'no-process-exit',
    'no-restricted-modules',
    'no-sync',
    'comma-spacing',
    'eol-last',
    'id-blacklist',
    'key-spacing',
    'line-comment-position',
    'linebreak-style',
    'max-lines',
    'max-nested-callbacks',
    'max-params',
    'max-statements',
    'new-cap',
    'new-parens',
    'no-array-constructor',
    'no-bitwise',
    'no-continue',
    'no-inline-comments',
    'no-multi-assign',
    'no-new-object',
    'no-plusplus',
    'no-restricted-syntax',
    'sort-keys',
    'constructor-super',
    'no-dupe-class-members',
    'no-duplicate-imports',
    'no-new-symbol',
    'no-restricted-imports',
    'no-useless-rename',
    'prefer-numeric-literals',
    'prefer-rest-params',
    'prefer-spread',
    'sort-imports',
    'symbol-description',
    // Got deprecated so didn't bother creating Coffeescript-specific version
    // after modifying catch variable scope behavior
    // 'no-catch-shadow'
    'import/no-webpack-loader-syntax',
    'import/first',
    'import/no-amd',
    'import/no-nodejs-modules',
    'import/exports-last',
    'import/no-namespace',
    'import/prefer-default-export',
    'import/max-dependencies',
    'import/newline-after-import',
    'import/group-exports',
    'no-misleading-character-class',
    'require-unicode-regexp',
    'unicode-bom',
    'no-tabs',
    'no-trailing-spaces',
    'quote-props',
    'require-atomic-updates',
    'no-floating-decimal',
    'computed-property-spacing',
    'no-undef',
    'space-in-parens',
    'jsx-quotes',
    'react/button-has-type',
    'react/forbid-component-props',
    'react/forbid-dom-props',
    'react/forbid-elements',
    'react/forbid-foreign-prop-types',
    'react/no-array-index-key',
    'react/no-children-prop',
    'react/no-danger',
    'react/no-did-mount-set-state',
    'react/no-did-update-set-state',
    'react/no-direct-mutation-state',
    'react/no-find-dom-node',
    'react/no-is-mounted',
    'react/no-set-state',
    'react/no-string-refs',
    'react/no-unknown-property',
    'react/no-unsafe',
    'react/no-will-update-set-state',
    'react/prefer-es6-class',
    'react/react-in-jsx-scope',
    'react/jsx-child-element-spacing',
    'react/jsx-closing-tag-location',
    'react/jsx-pascal-case',
    'react/jsx-no-target-blank',
    'react/jsx-curly-spacing',
    'react/jsx-equals-spacing',
    'react/jsx-filename-extension',
    'react/jsx-indent-props',
    'react/jsx-max-depth',
    'react/jsx-no-duplicate-props',
    'react/jsx-no-literals',
    'react/jsx-no-undef',
    'react/jsx-curly-brace-presence',
    'react/jsx-props-no-multi-spaces',
    'react/jsx-uses-react',
    'react/jsx-uses-vars',
    'react/void-dom-elements-no-children',
    'react-native/no-inline-styles',
    'no-empty-pattern',
    'react/require-optimization',
    'react/self-closing-comp',
    'react/jsx-sort-props',
    'import/default',
    'import/no-unresolved',
    'import/named',
    'import/no-restricted-paths',
    'import/no-absolute-path',
    'import/no-dynamic-require',
    'import/no-internal-modules',
    'import/no-self-import',
    'import/no-cycle',
    'import/no-useless-path-segments',
    'import/no-relative-parent-imports',
    'import/no-named-as-default',
    'import/no-extraneous-dependencies',
    'import/no-duplicates',
    'import/extensions',
    'import/no-unassigned-import',
    'import/no-named-default',
    'no-useless-catch',
    'react/static-property-placement',
    'react/jsx-props-no-spreading',
    'jsx-a11y/accessible-emoji',
    'jsx-a11y/alt-text',
    'jsx-a11y/anchor-has-content',
    'jsx-a11y/anchor-is-valid',
    'jsx-a11y/aria-activedescendant-has-tabindex',
    'jsx-a11y/aria-props',
    'jsx-a11y/aria-proptypes',
    'jsx-a11y/aria-role',
    'jsx-a11y/aria-unsupported-elements',
    'jsx-a11y/click-events-have-key-events',
    'jsx-a11y/heading-has-content',
    'jsx-a11y/html-has-lang',
    'jsx-a11y/iframe-has-title',
    'jsx-a11y/img-redundant-alt',
    'jsx-a11y/interactive-supports-focus',
    'jsx-a11y/label-has-associated-control',
    'jsx-a11y/lang',
    'jsx-a11y/media-has-caption',
    'jsx-a11y/mouse-events-have-key-events',
    'jsx-a11y/no-access-key',
    'jsx-a11y/no-autofocus',
    'jsx-a11y/no-distracting-elements',
    'jsx-a11y/no-interactive-element-to-noninteractive-role',
    'jsx-a11y/no-noninteractive-element-interactions',
    'jsx-a11y/no-noninteractive-element-to-interactive-role',
    'jsx-a11y/no-noninteractive-tabindex',
    'jsx-a11y/no-onchange',
    'jsx-a11y/no-redundant-roles',
    'jsx-a11y/no-static-element-interactions',
    'jsx-a11y/role-has-required-aria-props',
    'jsx-a11y/role-supports-aria-props',
    'jsx-a11y/scope',
    'jsx-a11y/tabindex-no-positive'
  ];

  // eslint-disable-next-line coffee/no-unused-vars
  yet = [
    'no-extra-parens', // prettier: yes
    'strict', // airbnb-base: ['error', 'never']
    'comma-dangle', // prettier: yes, airbnb-base: ['error', {
    // arrays: 'always-multiline',
    // objects: 'always-multiline',
    // imports: 'always-multiline',
    // exports: 'always-multiline',
    // functions: 'always-multiline',
    // }]
    'indent', // prettier: yes, airbnb-base: ['error', 2, {
    // SwitchCase: 1,
    // VariableDeclarator: 1,
    // outerIIFEBody: 1,
    // // MemberExpression: null,
    // FunctionDeclaration: {
    //   parameters: 1,
    //   body: 1
    // },
    // FunctionExpression: {
    //   parameters: 1,
    //   body: 1
    // },
    // CallExpression: {
    //   arguments: 1
    // },
    // ArrayExpression: 1,
    // ObjectExpression: 1,
    // ImportDeclaration: 1,
    // flatTernaryExpressions: false,
    // // list derived from https://github.com/benjamn/ast-types/blob/HEAD/def/jsx.js
    // ignoredNodes: ['JSXElement', 'JSXElement > *', 'JSXAttribute', 'JSXIdentifier', 'JSXNamespacedName', 'JSXMemberExpression', 'JSXSpreadAttribute', 'JSXExpressionContainer', 'JSXOpeningElement', 'JSXClosingElement', 'JSXText', 'JSXEmptyExpression', 'JSXSpreadChild'],
    // ignoreComments: false
    // }]
    'multiline-ternary', // prettier: yes maybe this should be multiline-control and check all "inline" (non-postfix) forms of control structures (which use then)?
    'padded-blocks', // prettier: yes I think only leading padding would apply (since trailing padding is considered outside the block) airbnb-base: ['error', {
    // blocks: 'never',
    // classes: 'never',
    // switches: 'never',
    // }, {
    // allowSingleLineBlocks: true,
    // }]
    'padding-line-between-statements', // I think only leading padding would apply (since trailing padding is considered outside the block)
    'quotes', // prettier: yes, airbnb-base: ['error', 'single', {avoidEscape: true}]
    'no-dupe-else-if',
    'no-import-assign',
    'no-setter-return',
    'default-param-last',
    'grouped-accessor-pairs',
    'no-constructor-return',
    'prefer-named-capture-group',
    'prefer-regex-literals',
    'function-call-argument-newline',
    'prefer-exponentiation-operator',
    'react/prefer-read-only-props',
    'react/jsx-no-script-url',
    'react/jsx-no-useless-fragment',
    'react/jsx-space-before-closing',
    'import/unambiguous',
    'react-native/sort-styles',
    'react-native/no-raw-text',
    'react-native/no-single-element-style-arrays',
    'lines-around-directive', // this is deprecated but is turned on by airbnb
    'no-spaced-func' // this is deprecated but is turned on by airbnb
  ];

  dontApply = [
    'prefer-const',
    'no-const-assign',
    'func-style',
    'eqeqeq',
    'prefer-arrow-callback',
    'arrow-body-style',
    'no-var',
    'one-var',
    'no-void',
    'sort-vars',
    'no-octal',
    'no-octal-escape',
    'func-names',
    'no-ternary',
    'init-declarations',
    'import/no-mutable-exports', // since you can't control whether an exported member is const - might be nice to implement its "possible future behavior" of checking whether it in fact does get reassigned?)
    'no-label-var',
    'no-extra-label',
    'no-unused-labels',
    'no-labels',
    'no-with',
    'no-fallthrough',
    'no-undef-init',
    'no-undefined',
    'require-await',
    'require-yield',
    'no-dupe-args',
    'getter-return', // could be used for Object.defineProperty() calls?
    'func-name-matching',
    'no-func-assign',
    'max-statements-per-line',
    'no-mixed-requires',
    'no-redeclare',
    'for-direction',
    'no-shadow-restricted-names',
    'no-case-declarations',
    'no-lone-blocks',
    'curly',
    'wrap-iife',
    'template-tag-spacing',
    'switch-colon-spacing',
    'semi',
    'semi-spacing',
    'semi-style',
    'no-extra-semi',
    'no-unexpected-multiline',
    'no-mixed-spaces-and-tabs',
    'no-nested-ternary',
    'no-implicit-globals', // it seems like non-bare compilation covers this
    'array-callback-return', // though could presumably support allowImplicit: false checking and possibly detect implicit returns of nullish values?
    'consistent-return', // could probably do some form of comparing implicitly (and/or explicitly) returned values?
    'block-spacing',
    'brace-style',
    'nonblock-statement-body-position',
    'object-curly-newline',
    'one-var-declaration-per-line',
    'space-before-blocks',
    'space-before-function-paren',
    'arrow-parens',
    'generator-star-spacing',
    'no-confusing-arrow',
    'yield-star-spacing',
    'func-call-spacing',
    'react/require-render-return',
    'no-eq-null',
    'no-multi-str',
    'react/state-in-constructor'
  ];

  rules = flow(mapWithKey(function(config, rule) {
    return [
      rule,
      {
        ...config,
        module: require(`./rules/${rule}`)
      }
    ];
  }), fromPairs)({
    'use-isnan': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-self-compare': {
      'airbnb-base': true
    },
    'valid-typeof': {
      'eslint-recommended': true,
      'airbnb-base': [
        'error',
        {
          requireStringLiterals: true
        }
      ]
    },
    'no-negated-condition': {},
    yoda: {
      'airbnb-base': true
    },
    camelcase: {
      'airbnb-base': [
        'error',
        {
          properties: 'never',
          ignoreDestructuring: false
        }
      ]
    },
    'dot-notation': {
      'airbnb-base': [
        'error',
        {
          allowKeywords: true
        }
      ]
    },
    'no-compare-neg-zero': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-unreachable': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'object-shorthand': {
      'airbnb-base': [
        'error',
        'always',
        {
          // ignoreConstructors: no
          avoidQuotes: true
        }
      ]
    },
    'no-empty-character-class': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-extra-boolean-cast': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-regex-spaces': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-implicit-coercion': {},
    'no-magic-numbers': {},
    'no-self-assign': {
      'eslint-recommended': true,
      'airbnb-base': [
        'error',
        {
          props: true
        }
      ]
    },
    'operator-assignment': {
      'airbnb-base': ['error', 'always']
    },
    'no-unused-expressions': {
      'airbnb-base': [
        'error',
        {
          allowShortCircuit: false,
          // allowTernary: no
          allowTaggedTemplates: false
        }
      ]
    },
    'class-methods-use-this': {
      'airbnb-base': true,
      airbnb: [
        'error',
        {
          exceptMethods: ['render',
        'getInitialState',
        'getDefaultProps',
        'getChildContext',
        'componentWillMount',
        'UNSAFE_componentWillMount',
        'componentDidMount',
        'componentWillReceiveProps',
        'UNSAFE_componentWillReceiveProps',
        'shouldComponentUpdate',
        'componentWillUpdate',
        'UNSAFE_componentWillUpdate',
        'componentDidUpdate',
        'componentWillUnmount',
        'componentDidCatch',
        'getSnapshotBeforeUpdate']
        }
      ]
    },
    'no-await-in-loop': {
      'airbnb-base': true
    },
    'prefer-destructuring': {
      'airbnb-base': [
        'error',
        {
          // VariableDeclarator:
          //   array: false
          //   object: true
          // AssignmentExpression:
          //   array: true
          //   object: false
          array: false,
          object: true
        },
        {
          enforceForRenamedProperties: false
        }
      ]
    },
    'no-constant-condition': {
      'eslint-recommended': true,
      'airbnb-base': ['warn']
    },
    'no-template-curly-in-string': {
      'airbnb-base': true
    },
    'no-unneeded-ternary': {
      'airbnb-base': [
        'error',
        {
          defaultAssignment: false
        }
      ]
    },
    'no-unmodified-loop-condition': {},
    'no-unused-vars': {
      'eslint-recommended': true,
      'airbnb-base': [
        'error',
        {
          vars: 'all',
          args: 'after-used',
          ignoreRestSiblings: true
        }
      ]
    },
    'no-use-before-define': {
      'airbnb-base': [
        'error',
        {
          functions: true,
          classes: true,
          variables: true
        }
      ]
    },
    'max-depth': {},
    'vars-on-top': {
      'airbnb-base': true
    },
    'guard-for-in': {
      'airbnb-base': true
    },
    'no-useless-return': {
      'airbnb-base': true
    },
    'arrow-spacing': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          before: true,
          after: true
        }
      ]
    },
    'object-curly-spacing': {
      prettier: true,
      'airbnb-base': ['error', 'always']
    },
    'capitalized-class-names': {
      plugin: false
    },
    complexity: {},
    'max-len': {
      prettier: true,
      'airbnb-base': [
        'error',
        100,
        2,
        {
          ignoreUrls: true,
          ignoreComments: false,
          ignoreRegExpLiterals: true,
          ignoreStrings: true,
          ignoreTemplateLiterals: true
        }
      ]
    },
    'no-invalid-this': {},
    'lines-between-class-members': {
      'airbnb-base': [
        'error',
        'always',
        {
          exceptAfterSingleLine: false
        }
      ]
    },
    'max-lines-per-function': {},
    'no-backticks': {
      plugin: false
    },
    'space-infix-ops': {
      prettier: true,
      'airbnb-base': true
    },
    'space-unary-ops': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          words: true,
          nonwords: false,
          overrides: {}
        }
      ]
    },
    'english-operators': {
      plugin: false
    },
    'no-unnecessary-fat-arrow': {
      plugin: false
    },
    'no-this-before-super': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-cond-assign': {
      'eslint-recommended': true,
      'airbnb-base': ['error', 'always']
    },
    'no-inner-declarations': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'consistent-this': {},
    'no-unsafe-negation': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'spaced-comment': {
      'airbnb-base': [
        'error',
        'always',
        {
          line: {
            exceptions: ['-',
        '+'],
            markers: [
              '=',
              '!' // space here to support sprockets directives
            ]
          },
          block: {
            exceptions: ['-',
        '+'],
            markers: [
              '=',
              '!',
              ':',
              '::' // space here to support sprockets directives and flow comment types
            ],
            balanced: true
          }
        }
      ]
    },
    'capitalized-comments': {},
    'no-underscore-dangle': {
      'airbnb-base': [
        'error',
        {
          allow: [],
          allowAfterThis: false,
          allowAfterSuper: false,
          enforceInMethodNames: true
        }
      ],
      airbnb: [
        'error',
        {
          allow: ['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'],
          allowAfterThis: false,
          allowAfterSuper: false,
          enforceInMethodNames: true
        }
      ]
    },
    'prefer-template': {
      'airbnb-base': true
    },
    'no-useless-escape': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-return-await': {
      'airbnb-base': true
    },
    'no-anonymous-default-export': {
      plugin: 'import'
    },
    export: {
      plugin: 'import',
      'airbnb-base': true
    },
    'no-commonjs': {
      plugin: 'import'
    },
    'no-default-export': {
      plugin: 'import'
    },
    'dynamic-import-chunkname': {
      plugin: 'import'
    },
    'no-lonely-if': {
      'airbnb-base': true
    },
    'no-loop-func': {
      'airbnb-base': true
    },
    'valid-jsdoc': {},
    'require-jsdoc': {},
    'multiline-comment-style': {},
    'no-div-regex': {},
    'no-extra-bind': {
      'airbnb-base': true
    },
    'no-return-assign': {
      'airbnb-base': ['error', 'always']
    },
    'no-shadow': {
      'airbnb-base': true
    },
    'no-class-assign': {
      'eslint-recommended': true,
      'airbnb-base': true
    },
    'no-overwrite': {
      plugin: false
    },
    'block-scoped-var': {
      'airbnb-base': true
    },
    'no-sequences': {
      'airbnb-base': true
    },
    'no-empty-function': {
      'airbnb-base': [
        'error',
        {
          // 'arrowFunctions',
          allow: ['functions',
        'methods']
        }
      ]
    },
    'no-async-promise-executor': {
      'airbnb-base': true
    },
    'array-bracket-newline': {
      prettier: true
    },
    'array-bracket-spacing': {
      prettier: true,
      'airbnb-base': ['error', 'never']
    },
    'prefer-object-spread': {
      'airbnb-base': true
    },
    'template-curly-spacing': {
      prettier: true,
      'airbnb-base': true
    },
    'rest-spread-spacing': {
      prettier: true,
      'airbnb-base': ['error', 'never']
    },
    'no-multiple-empty-lines': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          max: 2,
          maxBOF: 1,
          maxEOF: 0
        }
      ]
    },
    'newline-per-chained-call': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          ignoreChainWithDepth: 4
        }
      ]
    },
    'no-multi-spaces': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          ignoreEOLComments: false
        }
      ]
    },
    'array-element-newline': {
      prettier: true
    },
    'wrap-regex': {
      prettier: true
    },
    'keyword-spacing': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          before: true,
          after: true,
          overrides: {
            return: {
              after: true
            },
            throw: {
              after: true
            },
            case: {
              after: true
            }
          }
        }
      ]
    },
    'object-property-newline': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          allowAllPropertiesOnSameLine: true
        }
      ]
    },
    'lines-around-comment': {
      prettier: true
    },
    'function-paren-newline': {
      prettier: true,
      'airbnb-base': ['error', 'consistent']
    },
    'implicit-arrow-linebreak': {
      prettier: true,
      'airbnb-base': ['error', 'beside']
    },
    'no-mixed-operators': {
      prettier: true,
      'airbnb-base': [
        'error',
        {
          // the list of arthmetic groups disallows mixing `%` and `**`
          // with other arithmetic operators.
          groups: [
            ['%',
            '**'],
            ['%',
            '+'],
            ['%',
            '-'],
            ['%',
            '*'],
            ['%',
            '/'],
            ['/',
            '*'],
            ['&',
            '|',
            '<<',
            '>>',
            '>>>'],
            // ['==', '!=', '===', '!==']
            ['==',
            '!=',
            'is',
            'isnt'],
            // ['&&', '||']
            ['&&',
            '||',
            'and',
            'or']
          ],
          allowSamePrecedence: false
        }
      ]
    },
    'boolean-prop-naming': {
      plugin: 'react'
    },
    'default-props-match-prop-types': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          allowRequiredDefaults: false
        }
      ]
    },
    'destructuring-assignment': {
      plugin: 'react',
      airbnb: ['error', 'always']
    },
    'display-name': {
      plugin: 'react',
      recommended: true
    },
    'forbid-prop-types': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          forbid: ['any',
        'array',
        'object'],
          checkContextTypes: true,
          checkChildContextTypes: true
        }
      ]
    },
    'no-access-state-in-setstate': {
      plugin: 'react',
      airbnb: true
    },
    'no-danger-with-children': {
      plugin: 'react',
      airbnb: true
    },
    'no-deprecated': {
      plugin: 'react',
      airbnb: true
    },
    'no-multi-comp': {
      plugin: 'react'
    },
    'no-redundant-should-component-update': {
      plugin: 'react',
      airbnb: true
    },
    'no-render-return-value': {
      plugin: 'react',
      airbnb: true
    },
    'no-typos': {
      plugin: 'react',
      airbnb: true
    },
    'no-this-in-sfc': {
      plugin: 'react',
      airbnb: true
    },
    'no-unescaped-entities': {
      plugin: 'react',
      airbnb: true
    },
    'prefer-stateless-function': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          ignorePureComponents: true
        }
      ]
    },
    'jsx-boolean-value': {
      plugin: 'react',
      airbnb: [
        'error',
        'never',
        {
          always: []
        }
      ]
    },
    'jsx-closing-bracket-location': {
      plugin: 'react',
      prettier: true,
      airbnb: ['error', 'line-aligned']
    },
    'jsx-first-prop-new-line': {
      plugin: 'react',
      prettier: true,
      airbnb: ['error', 'multiline-multiprop']
    },
    'jsx-handler-names': {
      plugin: 'react'
    },
    'jsx-indent': {
      plugin: 'react',
      prettier: true,
      airbnb: ['error', 2]
    },
    'jsx-key': {
      plugin: 'react',
      recommended: true
    },
    'jsx-max-props-per-line': {
      plugin: 'react',
      prettier: true,
      airbnb: [
        'error',
        {
          maximum: 1,
          when: 'multiline'
        }
      ]
    },
    'no-else-return': {
      'airbnb-base': [
        'error',
        {
          allowElseIf: false
        }
      ]
    },
    'operator-linebreak': {
      prettier: true,
      'airbnb-base': [
        'error',
        'before',
        {
          overrides: {
            '=': 'none'
          }
        }
      ]
    },
    'jsx-no-bind': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          ignoreRefs: true,
          allowArrowFunctions: true,
          allowFunctions: false,
          allowBind: false,
          ignoreDOMComponents: true
        }
      ]
    },
    'jsx-no-comment-textnodes': {
      plugin: 'react',
      airbnb: true
    },
    'jsx-one-expression-per-line': {
      plugin: 'react',
      prettier: true,
      airbnb: [
        'error',
        {
          allow: 'single-child'
        }
      ]
    },
    'jsx-sort-default-props': {
      plugin: 'react'
    },
    'jsx-tag-spacing': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          // closingSlash: 'never'
          beforeSelfClosing: 'always',
          // afterOpening: 'never'
          beforeClosing: 'never'
        }
      ]
    },
    'jsx-wrap-multilines': {
      plugin: 'react',
      prettier: true,
      airbnb: [
        'error',
        {
          // declaration: 'parens-new-line'
          assignment: 'parens-new-line',
          return: 'parens-new-line',
          arrow: 'parens-new-line',
          // condition: 'parens-new-line'
          logical: 'parens-new-line',
          prop: 'parens-new-line'
        }
      ]
    },
    'no-unused-prop-types': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          customValidators: [],
          skipShapeProps: true
        }
      ]
    },
    'no-unused-state': {
      plugin: 'react',
      airbnb: true
    },
    'prop-types': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          ignore: [],
          customValidators: [],
          skipUndeclared: false
        }
      ]
    },
    'style-prop-object': {
      plugin: 'react',
      airbnb: true
    },
    'sort-prop-types': {
      plugin: 'react'
    },
    'sort-comp': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          order: ['static-variables',
        'static-methods',
        'instance-variables',
        'lifecycle',
        '/^on.+$/',
        'getters',
        'setters',
        '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
        'instance-methods',
        'everything-else',
        'rendering'],
          groups: {
            lifecycle: ['displayName',
        'propTypes',
        'contextTypes',
        'childContextTypes',
        'mixins',
        'statics',
        'defaultProps',
        'constructor',
        'getDefaultProps',
        'getInitialState',
        'state',
        'getChildContext',
        'getDerivedStateFromProps',
        'componentWillMount',
        'UNSAFE_componentWillMount',
        'componentDidMount',
        'componentWillReceiveProps',
        'UNSAFE_componentWillReceiveProps',
        'shouldComponentUpdate',
        'componentWillUpdate',
        'UNSAFE_componentWillUpdate',
        'getSnapshotBeforeUpdate',
        'componentDidUpdate',
        'componentDidCatch',
        'componentWillUnmount'],
            rendering: ['/^render.+$/',
        'render']
          }
        }
      ]
    },
    'require-default-props': {
      plugin: 'react',
      airbnb: [
        'error',
        {
          forbidDefaultForRequired: true
        }
      ]
    },
    'implicit-object': {
      plugin: false,
      prettier: true
    },
    'implicit-call': {
      plugin: false,
      prettier: true
    },
    'empty-func-parens': {
      plugin: false,
      prettier: true
    },
    'id-match': {},
    'comma-style': {
      prettier: true,
      'airbnb-base': [
        'error',
        'last',
        {
          exceptions: {
            ArrayExpression: false,
            ArrayPattern: false,
            ArrowFunctionExpression: false,
            CallExpression: false,
            FunctionDeclaration: false,
            FunctionExpression: false,
            ImportDeclaration: false,
            ObjectExpression: false,
            ObjectPattern: false,
            VariableDeclaration: false,
            NewExpression: false
          }
        }
      ]
    },
    'no-unused-styles': {
      plugin: 'react-native'
    },
    'split-platform-components': {
      plugin: 'react-native'
    },
    'no-color-literals': {
      plugin: 'react-native'
    },
    'shorthand-this': {
      plugin: false
    },
    'spread-direction': {
      plugin: false
    },
    'id-length': {},
    'no-new': {
      'airbnb-base': true
    },
    'postfix-comprehension-assign-parens': {
      plugin: false
    },
    'no-nested-interpolation': {
      plugin: false
    },
    'no-private-function-fat-arrows': {
      plugin: false
    },
    'no-unnecessary-double-quotes': {
      plugin: false
    },
    'dot-location': {
      prettier: true,
      'airbnb-base': ['error', 'property']
    },
    'no-whitespace-before-property': {
      'airbnb-base': true
    },
    'no-useless-computed-key': {
      'airbnb-base': true
    },
    'no-useless-constructor': {
      'airbnb-base': true
    },
    'callback-return': {},
    namespace: {
      plugin: 'import'
    },
    'no-unused-modules': {
      plugin: 'import'
    },
    'no-named-as-default-member': {
      plugin: 'import',
      'airbnb-base': true
    },
    'no-deprecated--import': {
      plugin: 'import',
      originalRuleName: 'no-deprecated'
    },
    order: {
      plugin: 'import',
      'airbnb-base': [
        'error',
        {
          groups: [['builtin',
        'external',
        'internal']]
        }
      ]
    },
    'no-named-export': {
      plugin: 'import'
    },
    'jsx-fragments': {
      plugin: 'react',
      airbnb: ['error', 'syntax']
    },
    'jsx-curly-newline': {
      plugin: 'react',
      prettier: true,
      airbnb: [
        'error',
        {
          multiline: 'consistent',
          singleline: 'consistent'
        }
      ]
    },
    'boolean-keywords': {
      plugin: false
    }
  });

  configureAs = function(ruleSettings) {
    return flow(mapWithKey(function({plugin, originalRuleName}, rule) {
      return [[`coffee/${rule}`, ruleSettings], ...(plugin !== false ? [[plugin ? `${plugin}/${originalRuleName != null ? originalRuleName : rule}` : rule, 'off']] : [])];
    }), flatten, fromPairs);
  };

  configureAsError = configureAs(['error']);

  turnOn = flow(map(function(rule) {
    return [rule, 'error'];
  }), fromPairs);

  turnOff = flow(map(function(rule) {
    return [rule, 'off'];
  }), fromPairs);

  prettierConfig = {
    extends: ['prettier'],
    plugins: ['coffee'],
    parser: 'eslint-plugin-coffee',
    rules: turnOff(flow(pickBy('prettier'), keys, map(function(rule) {
      return `coffee/${rule}`;
    }))(rules))
  };

  importConfig = {
    plugins: ['import'],
    parser: 'eslint-plugin-coffee',
    settings: {
      'import/extensions': ['.coffee', '.js', '.jsx'],
      'import/parsers': {
        'eslint-plugin-coffee/lib/parser': ['.coffee']
      },
      'import/resolver': {
        node: {
          extensions: ['.coffee', '.js', '.jsx']
        }
      }
    }
  };

  airbnbBaseOverridesConfig = {
    rules: {
      // Coffeescript doesn't (currently) support linebreaking before operators
      'coffee/operator-linebreak': 'off',
      'import/extensions': [
        'error',
        'ignorePackages',
        {
          js: 'never',
          mjs: 'never',
          jsx: 'never',
          coffee: 'never'
        }
      ]
    }
  };

  airbnbOverridesConfig = {
    rules: {
      'react/jsx-filename-extension': 'off'
    }
  };

  getAirbnbRules = function(airbnbKey) {
    return flow(pickBy(airbnbKey), mapWithKey(function({
        [airbnbKey]: ruleSettings,
        ...opts
      }, ruleName) {
      return configureAs(ruleSettings === true ? ['error'] : ruleSettings)({
        [ruleName]: opts
      });
    }), mergeAll)(rules);
  };

  airbnbBaseConfig = merge({}, importConfig, {
    extends: ['airbnb-base'],
    rules: {...getAirbnbRules('airbnb-base'), ...turnOff(dontApply), ...turnOff(yet)},
    settings: {
      // override airbnb's .coffee ignore
      'import/ignore': ['node_modules', '\\.(scss|css|less|hbs|svg|json)$']
    }
  }, airbnbBaseOverridesConfig);

  airbnbConfig = merge({
    extends: ['airbnb', 'plugin:coffee/airbnb-base'],
    rules: getAirbnbRules('airbnb')
  }, airbnbOverridesConfig);

  module.exports = {
    rules: mapValues('module')(rules),
    configs: {
      all: {
        plugins: ['coffee'],
        parser: 'eslint-plugin-coffee',
        rules: {...configureAsError(omitBy('plugin')(rules)), ...turnOn(reject(function(rule) {
            return /\//.test(rule);
          })(usable)), ...turnOff(dontApply), ...turnOff(yet)}
      },
      'eslint-recommended': {
        plugins: ['coffee'],
        parser: 'eslint-plugin-coffee',
        extends: ['eslint:recommended'],
        rules: {...configureAsError(pickBy('eslint-recommended')(rules)), ...turnOff(dontApply), ...turnOff(yet)}
      },
      'react-recommended': {
        plugins: ['coffee'],
        parser: 'eslint-plugin-coffee',
        extends: ['plugin:react/recommended'],
        rules: {...configureAsError(pickBy({
            plugin: 'react',
            recommended: true
          })(rules)), ...turnOff(dontApply), ...turnOff(yet)}
      },
      'react-all': {
        plugins: ['coffee'],
        parser: 'eslint-plugin-coffee',
        extends: ['plugin:react/all'],
        rules: {...configureAsError(pickBy({
            plugin: 'react'
          })(rules)), ...turnOff(dontApply), ...turnOff(yet)}
      },
      import: importConfig,
      'import-all': {
        ...importConfig,
        rules: {...turnOn(filter(function(rule) {
            return /^import\//.test(rule);
          })(usable)), ...configureAsError(pickBy({
            plugin: 'import'
          })(rules)), ...turnOff(dontApply), ...turnOff(yet)}
      },
      prettier: prettierConfig,
      'prettier-run-as-rule': {
        ...prettierConfig,
        plugins: ['coffee', 'prettier'],
        rules: {
          'prettier/prettier': [
            'error',
            {
              parser: 'coffeescript'
            }
          ],
          ...prettierConfig.rules
        }
      },
      'airbnb-base': airbnbBaseConfig,
      airbnb: airbnbConfig
    },
    parseForESLint
  };

}).call(this);
